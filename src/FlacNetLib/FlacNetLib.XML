<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlacNetLib</name>
    </assembly>
    <members>
        <member name="T:mjuAudio.Flac.Audio.BitStream">
            <summary>
            Represents a read-only FileStream as a succession of bits.
            </summary>
            <remarks>Provides a few methods to handle variable length encoded numbers.
            <para>Note: all numbers are supposed to be BigEndian (e.g., not Intel representation).</para></remarks>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.#ctor(System.String,System.Int64)">
            <summary>
            Creates a bit stream from a given file, starting at a given position.
            </summary>
            <param name="pathName">The path to the file.</param>
            <param name="startPosition">The zero-based offset from the start of the file,
            where the bit stream should begin.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.ReadUnaryUint">
            <summary>
            Gets the value of the unary coded integer found at the current bit stream position.
            </summary>
            <remarks>
            Once the read is complete, the stream points one bit past the end of the integer. 
            <para>Unary-coded integers
            are of the following form:</para>
            <ul>
            <li>1 = 01</li>
            <li>2 = 001</li>
            <li>3 = 0001</li>
            <li>etc...</li>
            </ul>
            </remarks>
            <returns>An unsigned integer.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.ReadInt32(System.Int32)">
            <summary>
            Gets a big endian 32-bit signed integer from the bit stream. 
            </summary>
            <remarks>The bit stream must be pointing to the first
            bit in the 32-bit integer.</remarks>
            <param name="width">The number of bits on which the 32-bit integer is coded. Note that
            due to the way FLAC encodes integer, this is not necessarily 32, but may be anything between 
            0 and 32.</param>
            <returns>A 32-bit signed integer read from the stream.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.ReadUInt32(System.Int32)">
            <summary>
            Gets a 32-bit unsigned integer from the bit stream.
            </summary>
            <remarks>The bit stream must be pointing to the first
            bit in the 32-bit integer.</remarks>
            <param name="width">The number of bits on which the 32-bit integer is coded. Note that
            due to the way FLAC encodes integer, this is not necessarily 32, but may be anything between 
            0 and 32. No check is performed on the value of <paramref name="width"/> for the sake of performance.</param>
            <returns>A 32-bit unsigned integer read from the bit stream.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.ReadByte">
            <summary>
            Gets the next 8 bits from the bit stream's current position.
            </summary>
            <returns>The value read from the stream, comprised between 0 and 255 inclusive.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.ReadBytes(System.Int32)">
            <summary>
            Gets the next bytes from the bit stream's current position.
            </summary>
            <param name="num">The number of bytes to retrieve. Must be less than or equal to 8. No check is performed
            on the value of <paramref name="num"/> for the sake of performance.</param>
            <returns>A 64-bit unsigned integer containing the bytes read. The last byte read is the least significant byte.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="array">N/A</param>
            <param name="offset">N/A</param>
            <param name="numBytes">N/A</param>
            <param name="userCallback">N/A</param>
            <param name="stateObject">N/A</param>
            <returns>N/A</returns>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="array">N/A</param>
            <param name="offset">N/A</param>
            <param name="numBytes">N/A</param>
            <param name="userCallback">N/A</param>
            <param name="stateObject">N/A</param>
            <returns>N/A</returns>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.EndRead(System.IAsyncResult)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="asyncResult">N/A</param>
            <returns>N/A</returns>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.EndWrite(System.IAsyncResult)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="asyncResult">N/A</param>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="array">N/A</param>
            <param name="offset">N/A</param>
            <param name="count">N/A</param>
            <returns>N/A</returns>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="array">N/A</param>
            <param name="offset">N/A</param>
            <param name="count">N/A</param>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.WriteByte(System.Byte)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="value">N/A</param>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.Flush">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.BitStream.SetLength(System.Int64)">
            <summary>
            This method would be inherited from <see cref="T:System.IO.FileStream"/> and is here disabled.
            </summary>
            <param name="value">N/A</param>
            <exception cref="T:System.NotImplementedException">This exception is thrown on every call to
            this method.</exception>
        </member>
        <member name="P:mjuAudio.Flac.Audio.BitStream.BitPosition">
            <summary>
            Gets or sets the bit position within the current byte.
            0 is the left-most bit, 7 the right-most.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.BitStream.Position">
            <summary>
            Gets or sets the 0-based offset of the current byte in the stream. 
            </summary>
            <remarks>        
            It is not possible to set the position past the end of the stream. Trying to do
            so results in no change to the position value.
            </remarks>
        </member>
        <member name="T:mjuAudio.Flac.Audio.BitStream.BitBuffer">
            <summary>
            Implements an intermediate buffer between the disk file and 
            the FlacNetLib decoder.
            </summary>
            <remarks>
            Bit buffers are objects internal to <see cref="T:mjuAudio.Flac.Audio.BitStream"/>. They should not be used
            outside of that context. They are documented here for the mere sake of consistency and completeness.
            <para>The BitStream class uses two bit buffers, with one (the background buffer)
            being asynchronously filled in the
            background, while the other (the current buffer) is being read from.
            When the latter has been exhausted, the two buffers
            switch roles: the previous background buffer becomes the new current one, ready to be read from, 
            while the former current buffer becomes the background buffer, and starts refilling if more audio data
            is available.</para></remarks>
        </member>
        <member name="F:mjuAudio.Flac.Audio.BitStream.BitBuffer.Buffer">
            <summary>The actual buffer.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.BitStream.BitBuffer.BufferReady">
            <summary>Indicates whether the buffer has been properly filled and is ready to be used.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.BitStream.BitBuffer.StartOffset">
            <summary>Gets the zero-based offset of the start of the BitBuffer, in bytes,
            relative to the start of the BitStream.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.BitStream.BitBuffer.Length">
            <summary>Gets the actual number of valid bytes in the buffer.</summary>
            <value>This is generally 8K, but may be less in case of an incomplete read (such
            as when reaching the end of the file).</value>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Constant">
            <summary>
            Represents a constant-signal subframe.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.SubFrame">
            <summary>
            Represents a FLAC audio subframe.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubFrame._type">
            <summary>Gets or sets the type of the subframe.</summary>
            <remarks>This field is publicly exposed as read only through the <see cref="P:mjuAudio.Flac.Audio.SubFrame.Type"/> property.</remarks>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubFrame._wastedBits">
            <summary>Gets or sets the number of wasted bits per sample.</summary>
            <remarks>This field is publicly exposed as read only through the <see cref="P:mjuAudio.Flac.Audio.SubFrame.Type"/> property.</remarks>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubFrame._sampleSize">
            <summary>Gets or sets the true sample size.</summary>
            <value>This is the subframe's sample size (as determined
            from the <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s sample size, amended by the <see cref="P:mjuAudio.Flac.Audio.Header.ChannelAssignment"/>)
            and minus the <see cref="F:mjuAudio.Flac.Audio.SubFrame._wastedBits">number of wasted bits</see>.</value>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubFrame._order">
            <summary>Gets or sets the predictor order for <see cref="T:mjuAudio.Flac.Audio.Lpc"/> and
            <see cref="T:mjuAudio.Flac.Audio.Fixed"/> subframes.</summary>
            <value>This property is undefined for <see cref="T:mjuAudio.Flac.Audio.Constant"/> and
            <see cref="T:mjuAudio.Flac.Audio.Verbatim"/> subframes.</value>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubFrame._blockSize">
            <summary>Gets or sets the parent <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s block size.</summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.SubFrame.#ctor(mjuAudio.Flac.Audio.BitStream,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:mjuAudio.Flac.Audio.SubFrame"/> from a bit stream. 
            </summary>
            <remarks>After the constructor is done, the
               bit stream points to the first bit past the subframe header.</remarks>
            <param name="bitStream">The bit stream to build the subframe from.
               The bit stream <see cref="P:mjuAudio.Flac.Audio.BitStream.Position"/> and <see cref="P:mjuAudio.Flac.Audio.BitStream.BitPosition"/>
               must point to the start of the subframe.</param>
            <param name="sampleSize">This subframe's sample size; may be different from 
               the frame sample size, depending on the channel assignment.</param>
            <param name="blockSize">The parent <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s block size.</param>
            <exception cref="T:mjuAudio.Flac.Audio.DecoderException">This exception is thrown if an incorrect value is
               detected in the subframe header (invalid bit padding, predictor order,
               or subframe type).</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.SubFrame.GetType(mjuAudio.Flac.Audio.BitStream)">
            <summary>
            Peeks at a <see cref="T:mjuAudio.Flac.Audio.BitStream"/> to determine the type of the upcoming subframe.
            Leaves the stream's bit and byte positions untouched.
            </summary>
            <param name="bitStream">The bit stream to look at.</param>
            <returns>The type of the subframe that resides at the
               current <paramref name="bitStream"/> position.</returns>
            <exception cref="T:mjuAudio.Flac.Audio.DecoderException">This exception is thrown if the type code retrieved from 
               the bit stream is invalid.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.SubFrame.Decode">
            <summary>
            Decodes the current subframe.
            </summary>
            <remarks>This method must be overriden in derived classes.</remarks>
            <returns>An integer array of length equal to the subframe's block size, and filled with
               decoded samples.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Audio.SubFrame.Type">
            <summary>Gets the subframe type.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.SubFrame.WastedBits">
            <summary>Gets the number of wasted bits per sample.</summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Constant.#ctor(mjuAudio.Flac.Audio.BitStream,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Audio.Constant"/> <see cref="T:mjuAudio.Flac.Audio.SubFrame"/> object from a bit stream.
            </summary>
            <remarks>After the constructor is done, the
            bit stream points to the first bit past the subframe header.
            </remarks>
            <param name="bitStream">The bit stream to build the subframe from.
            The bit stream <see cref="P:mjuAudio.Flac.Audio.BitStream.Position"/> and <see cref="P:mjuAudio.Flac.Audio.BitStream.BitPosition"/>
            must point to the start of the subframe.</param>
            <param name="sampleSize">This subframe's sample size; may be different from 
            the frame sample size, depending on the channel assignment.</param>
            <param name="blockSize">The parent frame's block size.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Constant.Decode">
            <summary>
            Decodes the subframe.
            </summary>
            <returns>An integer array of length equal to the subframe's block size, and filled with the 
            subframe's constant value.</returns>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Decoder">
            <summary>
            A class regrouping all the file level decoding functions
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.#ctor(mjuAudio.Flac.FlacFile)">
            <summary>
            Creates a new decoder instance for raw decoding to a byte array.
            </summary>
            <param name="f">A reference to the FLAC file to decode.</param>
            <remarks>Use the <see cref="M:mjuAudio.Flac.Audio.Decoder.DecodeToStream(System.Int32,System.Boolean@)"/> function with Decoders constructed this way.
            <para>If the <see cref="E:mjuAudio.Flac.Audio.Decoder.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>, then the decoding
            process is aborted.</para>
            </remarks>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.#ctor(mjuAudio.Flac.FlacFile,System.IO.Stream)">
             <summary>
             Creates a new streamed-output decoder instance.
             </summary>
             <param name="f">A reference to the FLAC file to decode.</param>
             <param name="outStream">The output stream.</param>
             <remarks>Use the <see cref="M:mjuAudio.Flac.Audio.Decoder.Decode"/> functions with Decoders constructed this way.
             <para>If the <see cref="E:mjuAudio.Flac.Audio.Decoder.FramesDecoded"/> event is defined and the
             handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>, then the decoding
             process is aborted.</para>
            </remarks>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.#ctor(mjuAudio.Flac.FlacFile,System.String)">
            <summary>
            Creates a new file-output decoder instance, to decode a given range in a FLAC file.
            </summary>
            <param name="f">A reference to the FLAC file to decode.</param>
            <param name="outFileName">The name of the output WAV file</param>
            <remarks>Use the <see cref="M:mjuAudio.Flac.Audio.Decoder.Decode"/> function or one of its overloads
            with Decoders constructed this way.
            <para>If the <see cref="E:mjuAudio.Flac.Audio.Decoder.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>, then the decoding
            process is aborted.</para>
            </remarks>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.#ctor(mjuAudio.Flac.FlacFile,System.Int32[][])">
            <summary>
            Creates a new decoder instance with output to an array of samples.
            </summary>
            <param name="f">The <see cref="T:mjuAudio.Flac.FlacFile"/> to decode.</param>
            <param name="outSamples">The array of output samples. The array must be initialized to the proper size before
            the call. The first index is the channel number, the second index the sample number.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.Close">
            <summary>
            Closes the Decoder.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.Decode">
            <summary>
            Decodes the entire FLAC file.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.Decode(mjuAudio.Flac.DecoderSampleRange,System.Boolean@)">
            <summary>
            Decodes a FLAC file range.
            </summary>
            <param name="range">The sample range to be decoded.</param>
            <param name="endOfFileReached">Set to <c>true</c> if the end of file is encountered while decoding, and to <c>false</c> otherwise.</param>
            <returns><c>false</c> if the user cancelled the operation, <c>true</c> otherwise.</returns>
            <remarks>This function executes a seek operation before the actual decoding takes place, unlike
            its overloaded version <see cref="M:mjuAudio.Flac.Audio.Decoder.Decode(System.Int64,System.Boolean@)"/>.</remarks>
            <exception cref="T:mjuAudio.Flac.Audio.DecoderException">This exception is thrown when the stream cannot be
            properly parsed, for some reason.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.Decode(System.Int64,System.Boolean@)">
            <summary>
            Decodes a FLAC file range. Decoding starts from the current position in the file.
            </summary>
            <param name="numSamples">The number of samples to decode</param>
            <param name="done">Set to <c>true</c> if the end of file is encountered while decoding, and to <c>false</c> otherwise.</param>
            <returns><c>false</c> if the user cancelled the operation
            (Notification function returned false), <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.DecodeToStream(System.Int32,System.Boolean@)">
            <summary>
            Decodes a FLAC file range.
            </summary>
            <remarks> Decoding starts from the current position in the file.
            Output goes as binary data to a MemoryStream.</remarks>
            <param name="numSamples">The number of samples to decode.</param>
            <param name="done">Set to <c>true</c> if the end of file is encountered while decoding, and to <c>false</c> otherwise.</param>
            <returns>A resizable <see cref="T:System.IO.MemoryStream"/> containing the decoded samples.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder.SeekTo(System.Int64)">
            <summary>
            Sets the current position to a given sample number.
            </summary>
            <param name="sampleNumber">The sample number to be set as the current position.</param>
            <exception cref="T:mjuAudio.Flac.Audio.DecoderException">This exception is thrown when the stream cannot be
            properly parsed, for some reason.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder._seekTo(System.Int64)">
            <summary>
            Sets the underlying stream position to the beginning of the frame containing a given sample
            </summary>
            <remarks>This clones the algorithm used by libFlac's seekable stream decoder</remarks>
            <param name="targetSample">The sample number where to position the decoder</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Decoder._writeWavHeader">
            <summary>
            Writes or rewrites the ouput WAV file header
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Decoder.MD5">
            <summary>
            Gets or sets an <see cref="T:mjuAudio.Flac.MD5Engine"/> to accumulate partial MD5 computation results.
            </summary>
            <remarks>Defaults to <c>null</c>, which disables the MD5 hash computation.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Decoder.NumberOfSamples">
            <summary>
            Gets the number of samples decoded so far.
            </summary>
        </member>
        <member name="E:mjuAudio.Flac.Audio.Decoder.FramesDecoded">
            <summary>
            This event is fired by the decoding process for every 10th frame decoded.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.FrameNumberType">
            <summary>
            Represents the type of frame number used in the frame header.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.FrameNumberType.FrameNumber">
            <summary>The number represents the number of frames in the file.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.FrameNumberType.SampleNumber">
            <summary>The number represents the number of samples in the file.</summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.ChannelAssignment">
            <summary>
            Represents the channel assignment specified in the frame header.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.ChannelAssignment.Independent">
            <summary>Independent channels.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.ChannelAssignment.LeftSide">
            <summary>
            Left/side stereo: channel 0 is the left channel, channel 1 is the side (difference) channel.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.ChannelAssignment.RightSide">
            <summary>
            Right/side stereo: channel 0 is the side (difference) channel, channel 1 is the right channel.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.ChannelAssignment.MidSide">
            <summary>
            Mid/side stereo: channel 0 is the mid (average) channel, channel 1 is the side (difference) channel.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.SubframeType">
            <summary>
            Represents the subframe type.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubframeType.Constant">
            <summary>Constant signal frame.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubframeType.Verbatim">
            <summary>Verbatim (unencoded) frame.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubframeType.Fixed">
            <summary>Fixed predictor frame.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.SubframeType.Lpc">
            <summary>Linear predictor coefficient frame.</summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Fixed">
            <summary>
            Represents a fixed-predictor subframe.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Fixed.#ctor(mjuAudio.Flac.Audio.BitStream,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Audio.Fixed"/> <see cref="T:mjuAudio.Flac.Audio.SubFrame"/> object from a bit stream.
            </summary>
            <remarks>After the constructor is done, the
            bit stream points to the first bit past the subframe header.
            </remarks>
            <param name="bitStream">The bit stream to build the subframe from.
            The bit stream <see cref="P:mjuAudio.Flac.Audio.BitStream.Position"/> and <see cref="P:mjuAudio.Flac.Audio.BitStream.BitPosition"/>
            must point to the start of the subframe.</param>
            <param name="sampleSize">This subframe's sample size; may be different from 
            the frame sample size, depending on the channel assignment.</param>
            <param name="blockSize">The parent <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s block size.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Fixed.Decode">
            <summary>
            Decodes the subframe.
            </summary>
            <returns>An integer array of length equal to the subframe's block size, and filled with
            decoded samples.</returns>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Frame">
            <summary>
            Represents a FLAC audio frame.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Frame.#ctor(mjuAudio.Flac.Metadata.StreamInfo,mjuAudio.Flac.Audio.BitStream)">
            <summary>
            Builds a new <see cref="T:mjuAudio.Flac.Audio.Frame"/> object from a bit stream.
            </summary>
            <remarks>
            If there is no sync pattern at the current
            stream position, this constructor will seek one.
            </remarks>
            <param name="streamInfo">The STREAMINFO block from the FLAC file this frame belongs to.</param>
            <param name="bitStream">The bit stream.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Frame.Decode">
            <summary>
            Decodes the frame and returns the unencoded signals for all channels.
            </summary>
            <returns>An array of <see cref="P:mjuAudio.Flac.Audio.Header.NumberOfChannels"/> subarrays,
            each of size <see cref="P:mjuAudio.Flac.Audio.Header.BlockSize"/>.
            The first index is the channel index,
            the second one is the sample index.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Frame.Decode(System.Int64,System.Int64)">
            <summary>
            Decodes the frame between two samples.
            </summary>
            <param name="fromSampleNumber">The number of the first sample to decode.</param>
            <param name="toSampleNumber">The number of the sample immediately following the last one
            to decode.</param>
            <returns>An array of <see cref="P:mjuAudio.Flac.Audio.Header.NumberOfChannels"/> subarrays,
            each of size <paramref name="toSampleNumber"/>-<paramref name="fromSampleNumber"/>.
            The first index is the channel index,
            the second one is the sample index.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Frame.Header">
            <summary>
            Gets the frame header.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Frame.Start">
            <summary>
            Gets the start position of this frame within the stream (in bytes).
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Header">
            <summary>
            Represents an audio frame header.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Header.#ctor(mjuAudio.Flac.Metadata.StreamInfo,mjuAudio.Flac.Audio.BitStream)">
            <summary>
            Creates a new frame <see cref="T:mjuAudio.Flac.Audio.Header"/> from a bit stream.
            </summary>
            <remarks>Note that there is no knowing in advance
            how long the header really is. All we know is it is at least 6 byte long,
            and at most 16 bytes.
            <para>If the bit stream's current position does not point to a sync
            pattern, the constructor will move down the stream until it finds one or
            reaches the end of the stream.</para></remarks>
            <param name="streamInfo">The current FLAC file's STREAMINFO block.</param>
            <param name="bitStream">The bit stream to read from.</param>
            <exception cref="T:mjuAudio.Flac.Audio.EofException">This exception is thrown when the end of the stream
            is reached.</exception>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.VariableBlockSize">
            <summary>
            Gets the stream's blocking strategy.
            </summary>
            <value><c>true</c> for a variable-blocksize stream,
            <c>false</c> for a fixed-blocksize stream.</value>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.BlockSize">
            <summary>
            Gets the unencoded data block size, in bytes, i.e.,
            the number of samples in any of this frame's subframe.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.SampleRate">
            <summary>
            Gets this frame's sample rate, in samples per second.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.SampleSize">
            <summary>
            Gets this frame's sample size, in bits per sample.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.FrameNumber">
            <summary>
            Gets the number of this frame in the stream.
            </summary>
            <value>Returns the actual frame number if the stream has a fixed block
            size, or -1 if the stream has a variable block size.</value>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.SampleNumber">
            <summary>
            Gets the number of the first sample in the frame.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.ChannelAssignment">
            <summary>
            Gets the channel assignment for this frame.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.NumberOfChannels">
            <summary>
            Gets the number of channels in this frame.
            </summary>
            <value>Up to 8 in case of independent channels, 2 otherwise.</value>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Header.Length">
            <summary>
            Gets the total length of the header, from the sync code to the CRC included,
            in bytes.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Lpc">
            <summary>
            Represents a linear predictor coefficient subframe.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Lpc.#ctor(mjuAudio.Flac.Audio.BitStream,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Audio.Lpc"/> <see cref="T:mjuAudio.Flac.Audio.SubFrame"/> object from a bit stream.
            </summary>
            <remarks>After the constructor is done, the
            bit stream points to the first bit past the subframe header.
            </remarks>
            <param name="bitStream">The bit stream to build the subframe from.
            The bit stream <see cref="P:mjuAudio.Flac.Audio.BitStream.Position"/> and <see cref="P:mjuAudio.Flac.Audio.BitStream.BitPosition"/>
            must point to the start of the subframe.</param>
            <param name="sampleSize">This subframe's sample size; may be different from 
            the frame sample size, depending on the channel assignment.</param>
            <param name="blockSize">The parent <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s block size.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Lpc.Decode">
            <summary>
            Decodes the subframe.
            </summary>
            <returns>An integer array of length equal to the subframe's block size, and filled with
            decoded samples.</returns>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Residual">
            <summary>
            Represents a set of residual partitions.
            </summary>
            <remarks>Residuals are used by <see cref="T:mjuAudio.Flac.Audio.Lpc"/> and <see cref="T:mjuAudio.Flac.Audio.Fixed"/> subframes. They encode
            the difference between the value of the predictor and the actual signal value.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Residual.#ctor(mjuAudio.Flac.Audio.BitStream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:mjuAudio.Flac.Audio.Residual"/> from a bit stream.
            </summary>
            <param name="bitStream">The bit stream. The stream position must point to 
            the beginning of the residual.</param>
            <param name="sampleSize">The parent <see cref="T:mjuAudio.Flac.Audio.Fixed"/> or <see cref="T:mjuAudio.Flac.Audio.Lpc"/> subframe's
            sample size.</param>
            <param name="blockSize">The parent <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s block size.</param>
            <param name="order">The parent <see cref="T:mjuAudio.Flac.Audio.Fixed"/> or <see cref="T:mjuAudio.Flac.Audio.Lpc"/>
            subframe's predictor order.</param>
            <exception cref="T:mjuAudio.Flac.Audio.DecoderException">This exception is thrown if an invalid
            residual coding method is passed to the constructor. There are currently
            two valid methods: Rice-coding with 4-bit Rice parameter (method 0), and Rice-coding
            with 5-bit Rice parameter (method 1).</exception>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Residual.PartitionCount">
            <summary>
            Gets the number of partitions in the Residual structure.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Audio.Residual.Item(System.Int32)">
            <summary>
            Gets a Rice partition from the residual structure.
            </summary>
            <param name="index">The index of the partition</param>
        </member>
        <member name="T:mjuAudio.Flac.Audio.RicePartition">
            <summary>
            Represents a Rice-coded residual partition.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.RicePartition.#ctor(mjuAudio.Flac.Audio.BitStream,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a new instance of <see cref="T:mjuAudio.Flac.Audio.RicePartition"/> from a bit stream.
            </summary>
            <param name="bitStream">The bit stream. The stream position must point to 
            the beginning of the residual.</param>
            <param name="partitionNumber">The partition index in the parent <see cref="T:mjuAudio.Flac.Audio.RicePartition"/>.
            The first partition is at index 0.</param>
            <param name="partitionOrder">The partition order.</param>
            <param name="predictorOrder">The parent <see cref="T:mjuAudio.Flac.Audio.Fixed"/> or <see cref="T:mjuAudio.Flac.Audio.Lpc"/>
            subframe's predictor order.</param>
            <param name="blockSize">The parent <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s block size.</param>
            <param name="method">This is the value of the 2-bit "residual coding method" field from the parent <see cref="T:mjuAudio.Flac.Audio.Residual"/>.
            For the sake of performance, no checking is performed on the value passed here. The check is done at the <see cref="T:mjuAudio.Flac.Audio.Residual"/>
            level.</param>
        </member>
        <member name="P:mjuAudio.Flac.Audio.RicePartition.Item(System.Int32)">
            <summary>
            Gets a residual value from the partition.
            </summary>
            <param name="index">The index of the residual value</param>
        </member>
        <member name="P:mjuAudio.Flac.Audio.RicePartition.Length">
            <summary>
            Gets the total number of residual values in the partition.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Utils">
            <summary>
            Defines various static objects to be used during the decoding process.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Audio.Utils.Crc8Engine">
            <summary>
            A CRC-8 engine for computing frame header CRCs.
            </summary>
            <remarks>This is defined as static in order to compute the predefined table only once.</remarks>
            <seealso cref="T:mjuAudio.Flac.Utils.CrcCalc"/>
        </member>
        <member name="F:mjuAudio.Flac.Audio.Utils.Crc16Engine">
            <summary>
            A CRC-16 engine for computing frame CRCs.
            </summary>
            <remarks>This is defined as static in order to compute the predefined table only once.</remarks>
            <seealso cref="T:mjuAudio.Flac.Utils.CrcCalc"/>
        </member>
        <member name="F:mjuAudio.Flac.Audio.Utils.ResMgr">
            <summary>
            A resource manager, allocated once, to be used during the decoding process if need be.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.DecoderSampleRange">
            <summary>
            A structure representing a range in a Flac file, bounded by sample numbers.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.DecoderSampleRange.StartSample">
            <summary>
            The number of the first sample in the range.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.DecoderSampleRange.EndSample">
            <summary>
            The number of the last sample in the range.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.DecoderSampleRange.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.DecoderSampleRange"/> instance.
            </summary>
            <param name="startSample">The number of the first sample in the range.</param>
            <param name="endSample">The number of the last sample in the range.</param>
        </member>
        <member name="M:mjuAudio.Flac.DecoderSampleRange.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:mjuAudio.Flac.DecoderSampleRange"/>
            </summary>
            <returns>A string formatted as "[StartSample, EndSample]".</returns>
        </member>
        <member name="P:mjuAudio.Flac.DecoderSampleRange.Length">
            <summary>
            The length of the range, in number of samples.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.DecoderTimeRange">
            <summary>
            A structure representing a range in a Flac file, bounded by <see cref="T:mjuAudio.Flac.Time"/> values.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.DecoderTimeRange.StartTime">
            <summary>
             The start <see cref="T:mjuAudio.Flac.Time"/> of the range.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.DecoderTimeRange.EndTime">
            <summary>
            The end <see cref="T:mjuAudio.Flac.Time"/> of the range.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.DecoderTimeRange.#ctor(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.DecoderTimeRange"/> instance.
            </summary>
            <param name="startTime">The start <see cref="T:mjuAudio.Flac.Time"/> of the range.</param>
            <param name="endTime">The end <see cref="T:mjuAudio.Flac.Time"/> of the range.</param>
        </member>
        <member name="M:mjuAudio.Flac.DecoderTimeRange.ToDecoderSampleRange(System.UInt32)">
            <summary>
            Converts this instance to an equivalent <see cref="T:mjuAudio.Flac.DecoderSampleRange"/>.
            </summary>
            <param name="sampleRate">The sample rate to be used for conversion, in number of samples per second.</param>
            <returns>A <see cref="T:mjuAudio.Flac.DecoderSampleRange"/> corresponding to this <see cref="T:mjuAudio.Flac.DecoderTimeRange"/>.</returns>
        </member>
        <member name="M:mjuAudio.Flac.DecoderTimeRange.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:mjuAudio.Flac.DecoderTimeRange"/>
            </summary>
            <returns>A string formatted as "[StartTime, EndTime]".</returns>
        </member>
        <member name="T:mjuAudio.Flac.Audio.Verbatim">
            <summary>
            Represents a verbatim (i.e., unencoded) subframe.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Verbatim.#ctor(mjuAudio.Flac.Audio.BitStream,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Audio.Verbatim"/> <see cref="T:mjuAudio.Flac.Audio.SubFrame"/> object from a bit stream.
            </summary>
            <remarks>After the constructor is done, the
            bit stream points to the first bit past the subframe header.
            </remarks>
            <param name="bitStream">The bit stream to build the subframe from.
            The bit stream <see cref="P:mjuAudio.Flac.Audio.BitStream.Position"/> and <see cref="P:mjuAudio.Flac.Audio.BitStream.BitPosition"/>
            must point to the start of the subframe.</param>
            <param name="sampleSize">This subframe's sample size; may be different from 
            the frame sample size, depending on the channel assignment.</param>
            <param name="blockSize">The parent <see cref="T:mjuAudio.Flac.Audio.Frame"/>'s block size.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.Verbatim.Decode">
            <summary>
            Decodes the subframe.
            </summary>
            <returns>An integer array of length equal to the subframe's block size, and filled with
            decoded samples.</returns>
        </member>
        <member name="T:mjuAudio.Flac.Audio.DecoderException">
            <summary>
            An exception thrown by the FLAC decoder.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Audio.DecoderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:mjuAudio.Flac.Audio.DecoderException"/> class" with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:mjuAudio.Flac.Audio.DecoderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:mjuAudio.Flac.Audio.DecoderException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference 
            if no inner exception is specified.</param>
        </member>
        <member name="T:mjuAudio.Flac.Audio.EofException">
            <summary>
            A special exception thrown when the decoder reaches the end of the audio stream.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.BlockWrittenEventArgs">
            <summary>
            A class representing the event data for a <see cref="T:mjuAudio.Flac.BlockWrittenEventHandler"/>.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.BlockWrittenEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:mjuAudio.Flac.BlockWrittenEventArgs"/> with a progress indicator.
            </summary>
            <param name="progress">The percentage of the write which is complete, expressed as 10th of percentage
            (e.g. 100 for 10%). Must be between 0 and 1000.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="progress"/> is less than 0 or greater than 1000.</exception>
        </member>
        <member name="P:mjuAudio.Flac.BlockWrittenEventArgs.Progress">
            <summary>
            Gets an indicator of the write progress.
            </summary>
            <value>Return the percentage of the write which is complete, expressed as 10th of percentage
            (e.g. 100 for 10%)</value>
        </member>
        <member name="P:mjuAudio.Flac.BlockWrittenEventArgs.Cancel">
            <summary>
            Gets or sets whether the write operation must be cancelled.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.BlockWrittenEventHandler">
            <summary>
            Represents the method that will handle a BlockWritten event in <see cref="T:mjuAudio.Flac.FlacFile"/>.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:mjuAudio.Flac.FlacFile">
            <summary>
            Represents a FLAC file.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a FlacFile object from a FLAC file.
            </summary>
            <param name="filePath">The path to the FLAC file.</param>
            <param name="fastOpen">When true, the <see cref="P:mjuAudio.Flac.FlacFile.InfoSet"/> will not be parsed. Use this option if
            you open the file for decoding only and you don't need track data.</param>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.String,mjuAudio.Flac.DecoderTimeRange,mjuAudio.Flac.MD5Engine)">
            <summary>
            Decodes a portion of the audio content to a WAV file.
            </summary>
            <param name="fileName">The name of the output WAV file.</param>
            <param name="range">The range to be decoded.</param>
            <param name="md5">A properly initialized MD5 engine. If null, no MD5 computation is run. If not null,
            the unencoded audio data is accumulated into the MD5Engine for hash
            computation. Defaults to null.</param>    
            <returns><c>false</c> if the user has cancelled the operation 
            (i.e.,if the <see cref="E:mjuAudio.Flac.FlacFile.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>),
            <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.IO.Stream,mjuAudio.Flac.DecoderTimeRange,mjuAudio.Flac.MD5Engine)">
            <summary>
            Decodes a portion of the audio content to a stream.
            </summary>
            <param name="stream">The name of the output stream.</param>
            <param name="range">The range to be decoded.</param>
            <param name="md5">A properly initialized MD5 engine. If null, no MD5 computation is run. If not null,
            the unencoded audio data is accumulated into the MD5Engine for hash
            computation. Defaults to null.</param>    
            <returns><c>false</c> if the user has cancelled the operation 
            (i.e.,if the <see cref="E:mjuAudio.Flac.FlacFile.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>),
            <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.String,mjuAudio.Flac.DecoderSampleRange,mjuAudio.Flac.MD5Engine)">
            <summary>
            Decodes a portion of the audio content to a WAV file.
            </summary>
            <param name="fileName">The name of the output WAV file.</param>
            <param name="range">The range to be decoded.</param>
            <param name="md5">An MD5 engine. If null, no MD5 computation is run. If not null,
            the unencoded audio data is accumulated into the MD5Engine for hash
            computation. Defaults to null.</param>    
            <returns><c>false</c> if the user has cancelled the operation 
            (i.e.,if the <see cref="E:mjuAudio.Flac.FlacFile.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>),
            <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.IO.Stream,mjuAudio.Flac.DecoderSampleRange,mjuAudio.Flac.MD5Engine)">
            <summary>
            Decodes a portion of the audio content to a stream.
            </summary>
            <param name="stream">The name of the output stream.</param>
            <param name="range">The range to be decoded.</param>
            <param name="md5">An MD5 engine. If null, no MD5 computation is run. If not null,
            the unencoded audio data is accumulated into the MD5Engine for hash
            computation. Defaults to null.</param>    
            <returns><c>false</c> if the user has cancelled the operation 
            (i.e.,if the <see cref="E:mjuAudio.Flac.FlacFile.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>),
            <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.String,System.Collections.Generic.List{mjuAudio.Flac.DecoderSampleRange},mjuAudio.Flac.MD5Engine)">
            <summary>
            Decodes portions of the audio content to a WAV file.
            </summary>
            <param name="fileName">The name of the output WAV file.</param>
            <param name="ranges">A list of ranges to be decoded.</param>
            <param name="md5">An MD5 engine. If null, no MD5 computation is run. If not null,
            the unencoded audio data is accumulated into the MD5Engine for hash
            computation. Defaults to null.</param>    
            <returns><c>false</c> if the user has cancelled the operation 
            (i.e.,if the <see cref="E:mjuAudio.Flac.FlacFile.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>),
            <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.IO.Stream,System.Collections.Generic.List{mjuAudio.Flac.DecoderSampleRange},mjuAudio.Flac.MD5Engine)">
            <summary>
            Decodes a portion of the audio content to a stream.
            </summary>
            <param name="stream">The name of the output stream.</param>
            <param name="ranges">A list of ranges to be decoded.</param>
            <param name="md5">An MD5 engine. If null, no MD5 computation is run. If not null,
            the unencoded audio data is accumulated into the MD5Engine for hash
            computation. Defaults to null.</param>    
            <returns><c>false</c> if the user has cancelled the operation 
            (i.e.,if the <see cref="E:mjuAudio.Flac.FlacFile.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>),
            <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.Int32[][],mjuAudio.Flac.DecoderSampleRange,mjuAudio.Flac.MD5Engine)">
            <summary>
            Decodes a portion of the audio content to an array of samples.
            </summary>
            <param name="sampleArray">The array where to write the samples. It must be properly size.</param>
            <param name="range">The range to be decoded.</param>
            <param name="md5">An MD5 engine. If null, no MD5 computation is run. If not null,
            the unencoded audio data is accumulated into the MD5Engine for hash
            computation. Defaults to null.</param>    
            <returns><c>false</c> if the user has cancelled the operation 
            (i.e.,if the <see cref="E:mjuAudio.Flac.FlacFile.FramesDecoded"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>),
            <c>true</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeTo(System.String,System.Boolean)">
            <summary>
            Decodes the entire audio content to a WAV file.
            </summary>
            <param name="fileName">The name of the output WAV file.</param>
            <param name="verify">Set to <c>true</c> to verify the MD5 signature of the decoded audio data
            against the signature in the STREAMINFO block, or to <c>false</c> if you don't want this 
            verification performed.</param>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.BeginDecode(mjuAudio.Flac.Time)">
            <summary>
            Initiates a decode-to-stream operation from a given time in the file.
            </summary>
            <param name="start">The time in the FLAC file where to begin decoding.</param>
            <remarks>This method (or its counterpart
            <see cref="M:mjuAudio.Flac.FlacFile.BeginDecode(System.Int64)"/>)
            must be called before <see cref="M:mjuAudio.Flac.FlacFile.DecodeToStream(System.Int32,System.Boolean@)"/> can be used.</remarks>
            <example>
            A typical decode-to-stream operation is shown below,
            whereby the 20.000 samples starting at time 1:20 in a file get decoded to a memory stream:
            <code>
            FlacFile f = new FlacFile(@"c:\sample.flac");
            f.BeginDecode(new Time(1,20,0));
            MemoryStream ms = f.DecodeToStream(20000);
            f.EndDecode();
            </code>
            </example>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.BeginDecode(System.Int32,System.Int64)">
            <summary>
            Initiates a decode-to-stream operation from a given track in the file.
            </summary>
            <param name="startTrack">The (1-based) number of the track where to begin decoding. A value of 0
            is accepted as meaning to start from the beginning (generally when decoding a whole file
            without bothering with tracks).</param>
            <param name="sampleOffset">An offset in number of samples from the start of the track, where to start decoding.</param>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.BeginDecode(System.Int64)">
            <summary>
            Initiates a decode-to-stream operation from a given sample in the file.
            </summary>
            <param name="startSample">The number of the first sample to decode. Defaults to 0.</param>
            <remarks>This method (or its counterpart
            <see cref="M:mjuAudio.Flac.FlacFile.BeginDecode(mjuAudio.Flac.Time)"/>)
            must be called before <see cref="M:mjuAudio.Flac.FlacFile.DecodeToStream(System.Int32,System.Boolean@)"/> can be used.</remarks>
            <example>
            A typical decode-to-stream operation is shown below,
            whereby the first 20.000 samples in a file get decoded to a memory stream:
            <code>
            FlacFile f = new FlacFile(@"c:\sample.flac");
            f.BeginDecode(0);
            MemoryStream ms = f.DecodeToStream(20000);
            f.EndDecode();
            </code>
            </example>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.EndDecode">
            <summary>
            Ends a decode-to-stream operation.
            </summary>
            <remarks>Performs necessary cleanup operations. This method must be called when the decode-to-stream
            operation is complete.</remarks>
            <example>
            A typical decode-to-stream operation is shown below,
            whereby 20.000 samples get decoded to a memory stream:
            <code>
            FlacFile f = new FlacFile(@"c:\sample.flac");
            f.BeginDecode(0);
            MemoryStream ms = f.DecodeToStream(20000);
            f.EndDecode();
            </code>
            </example>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.DecodeToStream(System.Int32,System.Boolean@)">
            <summary>
            Decodes a given number of samples starting from the current position.
            </summary>
            <param name="numSamples">The number of samples to decode.</param>
            <param name="done">Set to <c>true</c> if the end of file is encountered while decoding, and to <c>false</c> otherwise.</param>
            <returns>A <see cref="T:System.IO.MemoryStream"/> containing the decoded samples.</returns>
            <remarks><see cref="M:mjuAudio.Flac.FlacFile.BeginDecode(mjuAudio.Flac.Time)"/> or <see cref="M:mjuAudio.Flac.FlacFile.BeginDecode(System.Int64)"/> 
            must be called before this method can be used, otherwise a
            <see cref="T:System.NullReferenceException"/> may be thrown.<br/>When the call returns,
            the current position is advanced to the first sample after the last decoded one, so 
            that several calls to
            DecodeToStream can be made between BeginDecode() and EndDecode() calls: 
            </remarks>
            <example>
            A typical decode-to-stream operation is shown below,
            whereby the first 20.000 samples of a file get decoded to a memory stream:
            <code>
            FlacFile f = new FlacFile(@"c:\sample.flac");
            f.BeginDecode(0);
            MemoryStream ms = f.DecodeToStream(20000);
            f.EndDecode();
            </code>
            </example>
            <seealso cref="M:mjuAudio.Flac.FlacFile.BeginDecode(System.Int64)"/>
            <seealso cref="M:mjuAudio.Flac.FlacFile.BeginDecode(mjuAudio.Flac.Time)"/>
            <seealso cref="M:mjuAudio.Flac.FlacFile.EndDecode"/>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.SeekTo(System.Int64)">
            <summary>
            Sets the current position to a given sample.
            </summary>
            <param name="sampleNumber">The number of the next sample to decode.</param>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.WriteChanges">
            <summary>
            Commits changes to the FLAC file.
            </summary>
            <remarks>The write operation will be cancelled if the <see cref="E:mjuAudio.Flac.FlacFile.BlockWritten"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.BlockWrittenEventArgs"/>.
            <para>If the metadata fits exactly in the space available on disk, only that part will
            be rewritten for a faster save operation, and the BlockWritten event won't be triggered;
            if it does not, the whole file gets rewritten, and the BlockWritten event is triggered for every
            128KB written.</para></remarks>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.WriteChanges(System.String)">
            <summary>
            Commits changes to another FLAC file, leaving the original 
            file untouched.
            </summary>
            <param name="targetFile">The full path to the target file. If null, the file referenced by this instance 
            of <see cref="T:mjuAudio.Flac.FlacFile"/>will be overwritten. In this case, an attempt is made
            to write only the metadata part if it fits in the space available on disk, for a faster write operation.</param>
            <remarks>The write operation will be cancelled if the <see cref="E:mjuAudio.Flac.FlacFile.BlockWritten"/> event is defined and the
            handler sets the Cancel property of the related <see cref="T:mjuAudio.Flac.BlockWrittenEventArgs"/>.
            <para>If the metadata fits in the space available on disk, only that part will
            be rewritten for a faster save operation, and the BlockWritten event won't be triggered;
            if it does not, the whole file gets rewritten, and the BlockWritten event is triggered for every
            128KB written.</para></remarks>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.RefreshInfoSet">
            <summary>
            Refreshes the contents of the InfoSet with the latest metadata information
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile.UpdateMetadata(mjuAudio.Flac.Info.InfoSet,System.Int32,System.Boolean)">
            <summary>
            Updates metadata from the content of an <see cref="T:mjuAudio.Flac.Info.InfoSet"/>.
            </summary>
            <param name="infoSet">The infoSet from which to update the meta data blocks.</param>
            <param name="paddingSize">The minimum size of the PADDING block to be added at the end of the metadata.
            Use a negative value for automatic adjustment of the padding (see below). Default value is -1.</param>
            <param name="roundPadding"><c>true</c> to extend the padding to the next page boundary, false otherwise.
            Default value is <c>true</c>.</param>
            <remarks>When <paramref name="paddingSize"/> is set to a negative value, the padding is
            automatically adjusted: if the new metadata is smaller than the former metadata, a padding size is 
            computed that will make the new metadata (including padding) the same size as the former metadata;
            if the new metadata is larger than the former metadata, the padding size is set to 0
            and the rounding policy then applied as per the value of <paramref name="roundPadding"/>.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile._setCurrentTrack">
            <summary>
            Sets <see cref="P:mjuAudio.Flac.FlacFile.CurrentTrack"/> 
            and <see cref="P:mjuAudio.AudioFile.TrackLastSample"/> according to the value of <see cref="P:mjuAudio.AudioFile.CurrentSample"/>.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.FlacFile._adjustPadding(System.Int32,System.Boolean)">
            <summary>
            Adjusts padding so that the current metadatafits the space on disk (if smaller), or
            pad to the next 16K boundary.
            </summary>
            <param name="round"><c>true</c> to round the padding to the next page boundary.</param>
            <param name="size">The minimum padding size to be used. If set to a negative value, the padding is
            automatically adjusted so that the overall metadata area fits in the space available on disk;
            if the metadata area is larger than the space available on disk, the padding is set to 0
            (and the rounding then applied as per the value of <paramref name="round"/>.</param>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.Name">
            <summary>
            Gets the name of the file, excluding directory path, including extension.
            </summary>
            <seealso cref="P:mjuAudio.Flac.FlacFile.FullName"/>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.FullName">
            <summary>
            Gets the file's complete name, including full path.
            </summary>
            <seealso cref="P:mjuAudio.Flac.FlacFile.Name"/>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.StreamInfo">
            <summary>
            Gets the STREAMINFO mandatory metadata block.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.MetadataBlocks">
            <summary>
            Gets the collection of all optional metadata blocks (i.e., excluding STREAMINFO).
            </summary>
            <remarks>To get the STREAMINFO block, use the <see cref="P:mjuAudio.Flac.FlacFile.StreamInfo"/> property.<br/>
            Protected set access is given
            to allow for metadata extension in derived classes.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.MetaLengthOnDisk">
            <summary>
            Gets the total space, in bytes, including headers and padding, occupied by metadata 
            (including the STREAMINFO block) in the file as written on disk.
            </summary>
            <remarks>In case the metadata has been modified, and the changes
            have not been committed to disk yet, this value will be different from 
            the length of the modified metadata
            (given by the <see cref="P:mjuAudio.Flac.FlacFile.MetaLengthCurrent"/> property).</remarks>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.FirstFrameOffset">
            <summary>
            Gets the position (in number of bytes from the beginning of the file,
            the first byte being at offset 0)
            of the first byte of the first audio frame in the stream.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.MetaLengthCurrent">
            <summary>
            Gets the total space, in bytes, including headers and padding, that the current metadata
            (including the STREAMINFO block) would take once written to disk.
            </summary>
            <remarks>This may be different from the value returned by <see cref="P:mjuAudio.Flac.FlacFile.MetaLengthOnDisk"/>,
            in case the metadata has been modified and the changes have not yet been
            committed to disk.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.PaddingLength">
            <summary>
            Gets the length of PADDING block(s), excluding headers.
            </summary>
            <remarks>In case there are several PADDING blocks, this yields the sum of all
            block sizes.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.Duration">
            <summary>
            Gets a <see cref="T:mjuAudio.Flac.Time"/> representing the duration of the audio data.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.InfoSet">
            <summary>
            Gets the extended information block for this FlacFile
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.FlacFile.CurrentTrack">
            <summary>
            Gets the 1-based number of the track currently being decoded.
            </summary>
            <value>Returns 0 before a call to <see cref="M:mjuAudio.Flac.FlacFile.BeginDecode(System.Int32,System.Int64)"/> or one of its overloads or after
            a call to <see cref="M:mjuAudio.Flac.FlacFile.EndDecode"/>, otherwise, returns the number of the track that the first
            sample returned by the last call to <see cref="M:mjuAudio.Flac.FlacFile.DecodeToStream(System.Int32,System.Boolean@)"/> belongs to.</value>
        </member>
        <member name="E:mjuAudio.Flac.FlacFile.BlockWritten">
            <summary>
            This event is fired every time 128KB have been written to disc by <see cref="M:mjuAudio.Flac.FlacFile.WriteChanges"/> or one of
            its overloads.
            </summary>
        </member>
        <member name="E:mjuAudio.Flac.FlacFile.FramesDecoded">
            <summary>
            This event is fired by the decoding process for every 10th frame decoded.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.FramesDecodedEventArgs">
            <summary>
            A class representing the event data for a <see cref="T:mjuAudio.Flac.FramesDecodedEventHandler"/>.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.FramesDecodedEventArgs.#ctor(System.Int64,System.String)">
            <summary>
            Creates a new instance of <see cref="T:mjuAudio.Flac.FramesDecodedEventArgs"/>.
            </summary>
            <param name="sampleNumber">The number of the next sample to be decoded.</param>
            <param name="message">A message passed.</param>
        </member>
        <member name="P:mjuAudio.Flac.FramesDecodedEventArgs.SampleNumber">
            <summary>
            Gets the number of the next sample to be decoded.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.FramesDecodedEventArgs.Message">
            <summary>
            Gets a message passed along.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.FramesDecodedEventArgs.Cancel">
            <summary>
            Gets or sets whether the decoding operation must be cancelled.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.FramesDecodedEventHandler">
            <summary>
            Represents the method that will handle a FramesDecoded event in <see cref="T:mjuAudio.Flac.FlacFile"/>.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:mjuAudio.Flac.Info.Artist">
            <summary>
            A class representing an artist.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.#ctor(System.String,System.String)">
            <summary>
            Creates an artist with given sort and display names.
            </summary>
            <param name="sortName">The sort name.</param>
            <param name="displayName">The display name.</param>
            <remarks>If one of <paramref name="sortName"/> or <paramref name="displayName"/> is null or empty or white space, then
            the value of the other parameter will be used for both <see cref="P:mjuAudio.Flac.Info.Artist.SortName"/> and <see cref="P:mjuAudio.Flac.Info.Artist.Name"/>.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.#ctor(System.String)">
            <summary>
            Creates an artist with identical sort and display names.
            </summary>
            <param name="name">The artist's name.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.#ctor">
            <summary>
            Creates a new Artist instance.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.Clone">
            <summary>
            Creates a copy of this Artist instance.
            </summary>
            <returns>The copy of this Artist instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.Equals(mjuAudio.Flac.Info.Artist)">
            <summary>
            Determines whether the current Artist is equal to another Artist. 
            </summary>
            <param name="other">A Artist to compare with the current Artist instance.</param>
            <returns><c>true</c> if the specified Artist is equivalent to the current Artist instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.op_Equality(mjuAudio.Flac.Info.Artist,mjuAudio.Flac.Info.Artist)">
            <summary>
            Determines whether two Artist instances are equivalent.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns><c>true</c> if its two operands refer to equivalent objects (same Name, SortName, and Conductor).</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.op_Inequality(mjuAudio.Flac.Info.Artist,mjuAudio.Flac.Info.Artist)">
            <summary>
            Determines whether two Artist instances are different.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns><c>true</c> if its two operands refer to different objects (different Name, SortName, or Conductor).</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to this Artist instance.
            </summary>
            <param name="obj">The object to compare to the current Artist.</param>
            <returns><c>true</c> if the specified object is equivalent to the current Artist instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.GetHashCode">
            <summary>
            Returns a hash for the current instance.
            </summary>
            <returns>The hash code for this Artist instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.ToString">
            <summary>
            Creates a string representation of the Artist, suitable for insertion as a Vorbis comment field value.
            </summary>
            <returns>A string with the following format: "displayName [\0sortName] [|url]", which can be used directly as a Vorbis comment value.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Artist.FromString(System.String)">
            <summary>
            Creates an Artist instance from a string.
            </summary>
            <param name="s">A string formatted as "displayName [\0sortName] [|url]".</param>
            <remarks>The string must have the same format as that produced by <see cref="M:mjuAudio.Flac.Info.Artist.ToString"/>.</remarks>
            <returns>A new Artist instance.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.Artist.SortName">
            <summary>The string used to sort artists by name.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.Artist.Name">
            <summary>The string used to display an artist's name.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.Artist.URL">
            <summary>The artist's URL</summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.Extensions">
            <summary>
            A class that extends various <see cref="T:System.Collections.Generic.List`1"/> objects.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Extensions.Add(System.Collections.Generic.List{mjuAudio.Flac.Info.Artist},System.String)">
            <summary>
            Adds an artist to an artist collection.
            </summary>
            <param name="l">The artist collection to add to.</param>
            <param name="name">The artist's name.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Extensions.Add(System.Collections.Generic.List{mjuAudio.Flac.Info.Artist},System.String,System.String)">
            <summary>
            Adds an artist to an artist collection.
            </summary>
            <param name="l">The artist collection to add to.</param>
            <param name="sortName">The artist's sort name.</param>
            <param name="displayName">The artist's display name</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Extensions.Remove(System.Collections.Generic.List{mjuAudio.Flac.Info.Artist},System.String)">
            <summary>
            Removes an artist from an artist collection.
            </summary>
            <param name="l">The artist collection to remove from.</param>
            <param name="sortName">The artist's sort name.</param>
            <returns><c>true</c> if the artist is successfully removed; otherwise, <c>false</c>.
            This method also returns <c>false</c> if the artist was not found. </returns>
        </member>
        <member name="T:mjuAudio.Flac.Info.Index">
            <summary>
            A class representing an index entry in a cuesheet
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.#ctor(System.Int32,System.String)">
            <summary>
            Builds an index from an index number and a time string.
            </summary>
            <param name="number">The number to be assigned to the index.</param>
            <param name="timeString">The time string for the index (Minutes:Seconds:Frames).</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.#ctor(System.String)">
            <summary>
            Builds an index from a cuesheet index string.
            </summary>
            <param name="timeString">A cuesheet index string to build the index from, or a Minutes:Seconds:Frames string.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.#ctor(System.Int32)">
            <summary>
            Builds a new index with a given number.
            </summary>
            <param name="number">The number to be assigned to the Index.</param>
            <remarks>Only 0 is really meaningful as an index number. Index numbers will be reassigned when added to the index collection.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.#ctor">
            <summary>
            Builds a new Index without specifying a number.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.#ctor(mjuAudio.Flac.Time)">
            <summary>
            Builds a new Index for a given time.
            </summary>
            <param name="time">The <see cref="P:mjuAudio.Flac.Info.Index.Time"/> value to be assigned to the Index.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.ToString">
            <summary>
            Creates a human-readable representation of this Index instance, suitable for insertion as a Vorbis comment field value.
            
            </summary>
            <returns>A "INDEX XX MM:SS:FF" string, where MM represents the minutes, SS the seconds, FF the frames,
            and XX the index number.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.FromString(System.String)">
            <summary>
            Creates an Index instance from a string with the same format as that returned by <see cref="M:mjuAudio.Flac.Info.Index.ToString"/>.
            </summary>
            <remarks>The string format must be "MM:SS:FF", where MM represents the minutes, SS the seconds, and FF the frames.
            </remarks>
            <param name="s">The string to create the Index from.</param>
            <returns>A new Index instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.CompareTo(mjuAudio.Flac.Info.Index)">
            <summary>
            Compares this Index's time with another one.
            </summary>
            <param name="other">The other index.</param>
            <returns>0 if the two index times are equal, less than 0 if this instance has a smaller time 
            than <paramref name="other"/>, greater than 0 otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.Clone">
            <summary>
            Creates a copy of the index
            </summary>
            <returns>The copy of the index</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Index.Equals(mjuAudio.Flac.Info.Index)">
            <summary>
            Determines whether two Index instances are equal.
            </summary>
            <param name="other">The Index with which to compare this instance.</param>
            <returns><c>true</c> if the two Index instances refer to the same times, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.Index.Number">
            <summary>
            The index number.
            </summary>
            <remarks>Index numbers can only be modified from inside the library.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Info.Index.Minutes">
            <summary>
            The 'Minutes' field in the index marker (Minutes:Seconds:Frames)
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.Index.Seconds">
            <summary>
            The 'Seconds' field in the index marker (Minutes:Seconds:Frames)
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.Index.Frames">
            <summary>
            The 'Frames' field in the index marker (Minutes:Seconds:Frames)
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.Index.Time">
            <summary>
            The Index time string (Minutes:Seconds:Frames)
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.IndexCollection">
            <summary>
            A class representing a collection of indices within a single track.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.IndexCollection.Add(mjuAudio.Flac.Info.Index)">
            <summary>
            Adds an index to the collection. Nothing will happen if the index already exists in the collection.
            </summary>
            <param name="idx">The index to add.</param>
            <remarks>Adding an index with number 0 will force the index collection to start at 0. Otherwise, index numbers start at 1.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.IndexCollection.Remove(mjuAudio.Flac.Info.Index)">
            <summary>
            Removes an index from the collection.
            </summary>
            <param name="idx">The index to remove. If the index is not found in the set, nothing happens</param>
            <remarks>Removing the index with number 0 will force the index collection to start at index 1.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.IndexCollection.Remove(System.Int32)">
            <summary>
            Removes an index from the collection.
            </summary>
            <param name="num">The number of the index to remove</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.IndexCollection.Contains(System.Int32)">
            <summary>
            Checks whether a given index number exists.
            </summary>
            <param name="num">The number to test for.</param>
            <returns><c>true</c> if the index number is found in the collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.IndexCollection.Clear">
            <summary>
            Removes all indices from the collection.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.IndexCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the class
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.IndexCollection.Equals(mjuAudio.Flac.Info.IndexCollection)">
            <summary>
            Determines whether two index collections are equal.
            </summary>
            <param name="other">The IndexCollection to compare to the current instance.</param>
            <returns><c>true</c> if the two IndexCollections are identical, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.IndexCollection.FirstIndexIsZero">
            <summary>
            Gets or sets whether the first index in the collection is 0.
            </summary>
            <value>True if the first index number is 0, false otherwise. Default value is false.</value>
        </member>
        <member name="P:mjuAudio.Flac.Info.IndexCollection.Item(System.Int32)">
            <summary>
            Gets indices from the collection.
            </summary>
            <param name="num">The number of the <see cref="T:mjuAudio.Flac.Info.Index"/> to return.</param>
            <returns>An <see cref="T:mjuAudio.Flac.Info.Index"/> if one is found, or <c>null</c> if no index with that number is found.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.IndexCollection.Count">
            <summary>
            Gets the number of indices contained in the index collection
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.InfoSet">
            <summary>
            A class abstracting and regrouping various pieces of data from the metadata blocks
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.InfoSet.#ctor(System.Collections.Generic.List{mjuAudio.Flac.Metadata.Block},mjuAudio.Flac.FlacFile)">
            <summary>
            Create a new InfoSet from a set of metadata blocks (used when reading from an existing FLAC file)
            </summary>
            <param name="meta">A metadata block collection to build the <see cref="T:mjuAudio.Flac.Info.InfoSet"/> from. Default value is <c>null</c>.</param>
            <param name="flacFile">A <see cref="T:mjuAudio.Flac.FlacFile"/> who's metadata bloc collection is to be used to build the
            <see cref="T:mjuAudio.Flac.Info.InfoSet"/> from.</param>
            <remarks>
            <para>The <see cref="T:mjuAudio.Flac.Info.InfoSet"/> is created from the tags found in the <see cref="T:mjuAudio.Flac.Info.VorbisComment"/> and 
            <see cref="T:mjuAudio.Flac.Metadata.Picture"/>
            blocks contained in the primary source metadata block collection (see below for more). If no VorbisComment block is found,
            a default <see cref="F:mjuAudio.Flac.Info.InfoSet.Title"/> is derived from the name of the FLAC file passed as parameter (equal to the file's name, stripped
            of its extension, or to an empty string if <paramref name="flacFile"/> is <c>null</c>), and a default <see cref="T:mjuAudio.Flac.Info.Track"/> is created
            with a title equal to the default Title, and spanning the entire audio content of the file.</para>
            <para>If both <paramref name="meta"/> and <paramref name="flacFile"/> are <c>null</c>, an empty InfoSet is created.</para>
            <para>If only one is specified, then it is used as primary source.</para>
            <para>If both are specified, <paramref name="meta"/> is used as primary source, and <paramref name="flacFile"/> as source
            for the default Title and Track values.</para>
            </remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.InfoSet.#ctor(System.Int64)">
            <summary>
            Create an empty InfoSet, assigning it a unique ID
            </summary>
            <param name="uid">A 64-bit integer unique ID for the tag</param>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Artists">
            <summary>The list of artists.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Title">
            <summary>The album title.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Orchestras">
            <summary>The list of orchestras.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Performers">
            <summary>The list of involved people.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Genres">
            <summary>The list of genres.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.AlbumURL">
            <summary>The album URL</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Year">
            <summary>The year of recording or production. Null if not specified.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Tracks">
            <summary>The list of tracks.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Opera">
            <summary>
            The list of opera (which happens to be the plural of opus...)
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Pictures">
            <summary>The list of pictures.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.AlbumReplayGain">
            <summary>The album replay gain information</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.InfoSet.Error">
            <summary>The error information attached to the file, if any.</summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.InfoSet.SetUID(System.Int64)">
            <summary>
            Sets the InfoSet's unique ID
            </summary>
            <param name="uid">A 64-bit integer</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.InfoSet.Clone">
            <summary>
            Creates a copy of this instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.InfoSet.UID">
            <summary>
            The file's UID. This property is read-only. Use <see cref="M:mjuAudio.Flac.Info.InfoSet.SetUID(System.Int64)"/> to set the UID.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.Opus">
            <summary>
            A class representing a set of related tracks within a FLAC file.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.#ctor(mjuAudio.Flac.Info.InfoSet)">
            <summary>
            Builds a new <see cref="T:mjuAudio.Flac.Info.Opus"/> instance with a parent <see cref="T:mjuAudio.Flac.Info.InfoSet"/>.
            </summary>
            <param name="infoSet">The <see cref="T:mjuAudio.Flac.Info.InfoSet"/> which this Opus belongs to.</param>
            <remarks>This automatically adds the Opus to the <paramref name="infoSet"/>.Opera collection.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.#ctor">
            <summary>
            Creates a new Opus instance.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus._tracks">
            <summary>
            The list of Tracks in the Opus.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus.Artists">
            <summary>The list of artists.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus.Title">
            <summary>The opus title.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus.Orchestras">
            <summary>The list of orchestras.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus.Performers">
            <summary>The list of involved people.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus.Genres">
            <summary>The list of genres.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus.Year">
            <summary>The year of recording or production. Null if not specified.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Opus.Pictures">
            <summary>The list of pictures</summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.GetNumber(mjuAudio.Flac.Info.Track)">
            <summary>
            Gets the number of a track relative to this opus.
            </summary>
            <param name="t">The track the number of which we want to get.</param>
            <returns>The number of the track, or 0 if the track does not belong to the track collection.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.SetParent(mjuAudio.Flac.Info.InfoSet)">
            <summary>
            Links an exiting <see cref="T:mjuAudio.Flac.Info.Opus"/> to an existing <see cref="T:mjuAudio.Flac.Info.InfoSet"/>.
            </summary>
            <param name="infoSet">The <see cref="T:mjuAudio.Flac.Info.InfoSet"/> to link to.</param>
            <remarks>This function is used to link a standalone Opus (i.e., created with the
            <see cref="M:mjuAudio.Flac.Info.Opus.#ctor"/> constructor) to an existing InfoSet.
            It reconciles the track contents of the Opus and of the InfoSet.
            If the Opus is already linked to the given InfoSet, no action is performed
            and the function returns.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.ClearChildren">
            <summary>
            Empties all child collections from the opus (Artists, Performers, Genres, Orchestras, Pictures)
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.Add(mjuAudio.Flac.Info.Track)">
            <summary>
            Adds a track to this Opus.
            </summary>
            <param name="t">The track to add.</param>
            <remarks>The track will also be added to the <see cref="P:mjuAudio.Flac.Info.Opus.Parent"/> <see cref="T:mjuAudio.Flac.Info.InfoSet"/>
            <see cref="T:mjuAudio.Flac.Info.TrackCollection"/> if Parent is not null.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.Remove(mjuAudio.Flac.Info.Track)">
            <summary>
            Removes a track from this Opus.
            </summary>
            <param name="t">The track to remove.</param>
            <remarks>The track will also be removed from the <see cref="P:mjuAudio.Flac.Info.Opus.Parent"/> <see cref="T:mjuAudio.Flac.Info.InfoSet"/>
            <see cref="T:mjuAudio.Flac.Info.TrackCollection"/> if Parent is not null.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.Contains(mjuAudio.Flac.Info.Track)">
            <summary>
            Determines whether a given track belong to the collection.
            </summary>
            <param name="t">The track to look for.</param>
            <returns><c>true</c> if the track belongs to the collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.RemoveAllComments(mjuAudio.Flac.FlacFile)">
            <summary>
            Removes all Opus-related comments from a FlacFile.
            </summary>
            <param name="flacFile">The FLAC file to process.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.CreateComments(mjuAudio.Flac.FlacFile)">
            <summary>
            Creates the comment fields relevant to this opus.
            </summary>
            <remarks>Adds the fields to the existing Vorbis comment block. Creates a new one
            if none already exists.</remarks>
            <param name="flacFile">The <see cref="T:mjuAudio.Flac.FlacFile"/> where to create the comments.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.Clone">
            <summary>
            Creates a copy of this Opus instance.
            </summary>
            <returns>A new Opus instance, containing clones of the original Opus members.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Opus.CompareTo(mjuAudio.Flac.Info.Opus)">
            <summary>
            Compares this Opus instance with another one.
            </summary>
            <param name="other">The Opus to be compared to.</param>
            <returns>-1 if the first track of this Opus comes before the first track of the other Opus, 1 in the other case,
            and 0 if the first tracks overlap. If one Opus does not contain any track, it is considered as coming first.
            If both have no tracks, they are sorted by sort title.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.Opus.Item(System.Int32)">
            <summary>
            Returns a track from the opus' collection of tracks.
            </summary>
            <param name="i">The 1-based opus track number.</param>
            <returns></returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.Opus.FirstTrackNumber">
            <summary>
            Gets or sets the number of the first track in the opus.
            </summary>
            <remarks>Defaults to 1. A different value can be used in cases where a global opus spans several
            FLAC files: in that case, in that case, the global opus is broken down into several smaller opera,
            each of which contains some of the tracks. All of those opera, except for the first one, have
            track numbers that start at a value greater than 1.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Info.Opus.Count">
            <summary>
            Gets the number of tracks in the collection.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.Opus.Parent">
            <summary>
            The parent InfoSet this Opus belongs to.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.Orchestra">
            <summary>
            A class representing a band or orchestra.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.#ctor(System.String,System.String)">
            <summary>
            Creates a new Orchestra instance, with given name and conductor.
            </summary>
            <param name="name">The name of the orchestra.</param>
            <param name="conductor">The name of the orchestra's conductor.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.#ctor(System.String,System.String,mjuAudio.Flac.Info.Artist)">
            <summary>
            Creates a new Orchestra instance, with given sort and display names, and conductor.
            </summary>
            <param name="sortName">The sort name of the orchestra.</param>
            <param name="displayName">The displayed name for the orchestra.</param>
            <param name="conductor">The orchestra's conductor.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.#ctor">
            <summary>
            Creates a new Orchestra instance.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.ToString">
            <summary>
            Returns a string representation of this Orchestra instance.
            </summary>
            <returns>A string with the following format: "orchestraName [| directorName]) \0 orchestraSortName [| directorSortName]",
            which can be used directly as a Vorbis comment value.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.Clone">
            <summary>
            Creates a copy of this Orchestra instance.
            </summary>
            <returns>The copy of this Orchestra instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.FromString(System.String)">
            <summary>
            Creates an Orchestra instance from a string
            </summary>
            <param name="s">The string to create the Orchestra instance from.</param>
            <remarks><paramref name="s"/>must have the same format as that returned by <see cref="M:mjuAudio.Flac.Info.Orchestra.ToString"/>
            ("orchestraName [| directorName]) \0 orchestraSortName [| directorSortName]").
            </remarks>
            <returns>A new Orchestra instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.Equals(mjuAudio.Flac.Info.Orchestra)">
            <summary>
            Determines whether the current Orchestra is equal to another Orchestra. 
            </summary>
            <param name="other">A Orchestra to compare with the current Orchestra instance.</param>
            <returns><c>true</c> if the specified Orchestra is equivalent to the current Orchestra instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.op_Equality(mjuAudio.Flac.Info.Orchestra,mjuAudio.Flac.Info.Orchestra)">
            <summary>
            Determines whether two Orchestra instances are equivalent.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns><c>true</c> if its two operands refer to equivalent objects (same Name, SortName, and Conductor).</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.op_Inequality(mjuAudio.Flac.Info.Orchestra,mjuAudio.Flac.Info.Orchestra)">
            <summary>
            Determines whether two Orchestra instances are different.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns><c>true</c> if its two operands refer to different objects (different Name, SortName, or Conductor).</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to this Orchestra instance.
            </summary>
            <param name="obj">The object to compare to the current Orchestra.</param>
            <returns><c>true</c> if the specified object is equivalent to the current Orchestra instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Orchestra.GetHashCode">
            <summary>
            Returns a hash for the current instance.
            </summary>
            <returns>The hash code for this Orchestra instance.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.Orchestra.Conductor">
            <summary>The name of the orchestra's conductor, if any.</summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.Performer">
            <summary>
            A class representing an involved person.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a performer with given sort and display names, and a role.
            </summary>
            <param name="sortName">The sort name.</param>
            <param name="displayName">The display name.</param>
            <param name="role">The role.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string with the following format: "performerName [| instrumentName/Role] [\0 performerSortName]", which can be used directly as a Vorbis comment value.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.FromString(System.String)">
            <summary>
            Creates a Performer instance from a string
            </summary>
            <param name="s">A string to create the Performer instance from.</param>
            <remarks><paramref name="s"/> must have the same format as that returned by <see cref="M:mjuAudio.Flac.Info.Performer.ToString"/>
            ("performerName [| instrumentName/Role] [\0 performerSortName]").</remarks>
            <returns>A new Performer instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.Clone">
            <summary>
            Creates a copy of this Performer instance.
            </summary>
            <returns>A copy of this Performer instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.Equals(mjuAudio.Flac.Info.Performer)">
            <summary>
            Determines whether the current Performer is equal to another Performer. 
            </summary>
            <param name="other">A Performer to compare with the current Performer instance.</param>
            <returns><c>true</c> if the specified Performer is equivalent to the current Performer instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.op_Equality(mjuAudio.Flac.Info.Performer,mjuAudio.Flac.Info.Performer)">
            <summary>
            Determines whether two Performer instances are equivalent.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns><c>true</c> if its two operands refer to equivalent objects (same Name, SortName, and Role).</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.op_Inequality(mjuAudio.Flac.Info.Performer,mjuAudio.Flac.Info.Performer)">
            <summary>
            Determines whether two Performer instances are different.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns><c>true</c> if its two operands refer to different objects (different Name, SortName, or Role).</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to this Performer instance.
            </summary>
            <param name="obj">The object to compare to the current Performer.</param>
            <returns><c>true</c> if the specified object is equivalent to the current Performer instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Performer.GetHashCode">
            <summary>
            Returns a hash for the current instance.
            </summary>
            <returns>The hash code for this Performer instance.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.Performer.Role">
            <summary>
            Gets or sets the Performer's role.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.ReplayGain">
            <summary>
            A structure representing replay gain data
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.ReplayGain.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new ReplayGain structure
            </summary>
            <param name="gain">The gain value, in dB.</param>
            <param name="peak">The peak value (should be between 0 and 1).</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.ReplayGain.#ctor(System.String,System.String)">
            <summary>
            Creates a new ReplayGain structure
            </summary>
            <param name="gain">The gain value (format [+/-]0.00[dB]).</param>
            <param name="peak">The peak value (should be between 0 and 1).</param>
        </member>
        <member name="P:mjuAudio.Flac.Info.ReplayGain.Gain">
            <summary>The gain, in dB</summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.ReplayGain.GainString">
            <summary>The gain, as a string (format: [+/-]0.00[ ][dB])</summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.ReplayGain.Peak">
            <summary>The peak value, an absolute number between 0 and 1 included</summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.ReplayGain.PeakString">
            <summary>A string representation of the peak value (an absolute number between 0 and 1 included)</summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.Track">
            <summary>
            A class used to describe a track
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Artists">
            <summary>The list of artists for this track.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Performers">
            <summary>The list of involved persons for this track.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Genres">
            <summary>The list of genres for this track.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Orchestras">
            <summary>The list of orchestras for this track.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Pictures">
            <summary>The list of pictures for this track.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Title">
            <summary>The track sort and display titles</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Subtitle">
            <summary>The track's subtitle</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.TrackReplayGain">
            <summary>Track replay gain information</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.Track.Year">
            <summary>The track's year</summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Track.#ctor">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Info.Track"/> instance.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Track.ClearChildren">
            <summary>
            Empties all child collections from the track (Artists, Indices, Performers, Genres, Orchestras, Pictures)
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.Track.CompareTo(mjuAudio.Flac.Info.Track)">
            <summary>
            Compares tracks based on their respective indices
            </summary>
            <param name="other">The other <see cref="T:mjuAudio.Flac.Info.Track"/> to compare this instance to.</param>
            <returns>
            0 if the tracks overlap (i.e., some indices of one of the tracks fall in the range defined by
            the indices of the other track),
            1 if this instance comes after the other track (i.e., all indices of this instance are larger
            than those of the other track),
            -1 if this instance comes before the other track (i.e., all indices of this instance are smaller
            than those of the other track).
            </returns>
            <remarks>It is assumed that the compared tracks have their index collections
            properly ordered.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.Track.Clone">
            <summary>
            Creates a copy of this track containing clones of the original track children.
            </summary>
            <returns>A copy of this track.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.Track.Equals(mjuAudio.Flac.Info.Track)">
            <summary>
            Determines whether two tracks are equal.
            </summary>
            <param name="other">A Track to compare with the current instance.</param>
            <returns><c>true</c> if the tracks have the same indices and the same title, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.Track.Indices">
            <summary>The list of indices for this track</summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.Track.Gap">
            <summary>
            The length of the gap, i.e., the lapse of time between index 0 (if any)
            and index 1. Returns 0 if there is no index 0.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.TrackCollection">
            <summary>
            Implements a collection of tracks. Tracks are indexed from 1 to 99.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.TrackCollection.FirstTrackNumber">
            <summary>
            Gets or sets the number of the first track in the collection.
            </summary>
            <remarks>Defaults to 1.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.Contains(mjuAudio.Flac.Info.Track)">
            <summary>
            Determines whether a track belongs to the track collection.
            </summary>
            <param name="t">The Track to look for.</param>
            <returns><c>true</c> if the track belongs to the collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.Add(mjuAudio.Flac.Info.Track)">
            <summary>
            Adds a track to the collection.
            </summary>
            <param name="t">The track to be added to the collection.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.Clear">
            <summary>
            Removes all tracks from the collection.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.CheckSequence">
            <summary>
            Checks that the tracks don't overlap each other.
            </summary>
            <returns>-1 if the sequence is OK, 
            otherwise, the number of the first out-of-order track.</returns>
            <exception cref="T:System.ApplicationException">If any track has its indices out of order.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.Remove(mjuAudio.Flac.Info.Track)">
            <summary>
            Removes a track from the collection.
            </summary>
            <param name="t">The track to be removed from the collection.</param>
            <returns><c>true</c> if the track was successfully removed from the collection, <c>false</c> otherwise.
            This method also returns <c>false</c> if the track was no found in the collection.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.GetNumber(mjuAudio.Flac.Info.Track)">
            <summary>
            Gets the number of a given track.
            </summary>
            <param name="t">The track the number of which we want to get.</param>
            <returns>The number of the track, or 0 if the track does not belong to the track collection.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.StartTime(mjuAudio.Flac.Info.Track)">
            <summary>
            Gets the start time of a given track.
            </summary>
            <param name="t">The track the start time of which is to be returned.</param>
            <returns>The start time of the track.</returns>
            <remarks>The start time of a track is that of index 1, except for track 0, where we take
            the time of index 0. If the track does not contain an index 1, then the time of the first
            index found is returned.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.StartTime(System.Int32)">
            <summary>
            Gets the start time of a given track.
            </summary>
            <param name="trackNum">The number of the track for which the track time is to be returned</param>
            <returns>The start time of the track</returns>
            <remarks>The start time of a track is that of index 1, except for track 0, where we take
            the time of index 0. If the track does not contain an index 1, then the time of the first
            index found is returned.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.CreateComments(mjuAudio.Flac.FlacFile)">
            <summary>
            Creates the comment fields relevant to this track collection. Removes all previous track comments.
            </summary>
            <param name="flacFile">The FLAC file where to add the comments. If the FLAC file does not already
            contain a VORBIS_COMMENT block, a new one is created.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.TrackCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.TrackCollection.Item(System.Int32)">
            <summary>
            Gets or sets a track from the collection.
            </summary>
            <param name="i">The number of the track to be returned or set. This number must be greater than
            or equal to <see cref="F:mjuAudio.Flac.Info.TrackCollection.FirstTrackNumber"/>.</param>
            <returns>Track number <paramref name="i"/></returns>
            <remarks>If the <see cref="T:mjuAudio.Flac.Info.TrackCollection"/> contains only one track, that track is returned regardless of
            the value of <paramref name="i"/>, otherwise, <c>null</c> is returned if a track with the proper number cannot be found.
            </remarks>
        </member>
        <member name="P:mjuAudio.Flac.Info.TrackCollection.Count">
            <summary>
            Gets the number of tracks in the collection.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.TrackCollection.LastTrackNumber">
            <summary>
            Gets the number of the last track in the collection
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.VorbisComment">
            <summary>
            A class representing a VORBIS_COMMENT metadata block with a bit more abstraction than
            the base class <see cref="T:mjuAudio.Flac.Metadata.VorbisComment"/>.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.VorbisComment">
            <summary>
            Represents a VORBIS_COMMENT metadata block.
            </summary>
            <remarks><para>Refer to the 
            <a href="http://www.xiph.org/vorbis/doc/v-comment.html">Ogg Vorbis I format specification</a>
            for complete details on the structure of Vorbis comments.</para>
            <para>This class is actually a collection of key-value pairs (sorted by key, then by value) that
            can be enumerated. It implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.</para>
            </remarks>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.Block">
            <summary>
             Represents a generic metadata data block.
            </summary>
            <seealso cref="T:mjuAudio.Flac.Metadata.Header"/>
        </member>
        <member name="F:mjuAudio.Flac.Metadata.Block._byteArray">
            <summary>
            Gets or sets the byte array that represents the block (protected version). This is publicly exposed
            through the read only <see cref="P:mjuAudio.Flac.Metadata.Block.RawData"/> property.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Block.#ctor(mjuAudio.Flac.BlockType,System.Byte[])">
            <summary>
            Builds a metadata block from a byte array.
            </summary>
            <param name="type">The type of the block.</param>
            <param name="byteArray">
            The byte array representing the data part of the block. May be null to build an empty block.
            </param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Block.ToString">
            <summary>
            Returns a string representation of the block type.
            </summary>
            <returns>A string containing the type of the block.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Block.GetHumanReadableRepresentation">
            <summary>
            Gets a FrameworkElement containing a human-readable representation of the metadata block.
            </summary>
            <returns>A <see cref="T:System.Windows.FrameworkElement"/> suitable for inclusion into a WPF UI. It may 
            be for example a <see cref="T:System.Windows.Controls.DataGrid"/> or a <see cref="T:System.Windows.Controls.FlowDocumentScrollViewer"/>.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Block.GetBasicDocument">
            <summary>
            Gets a properly initialized document that can be used in derived classes to provide
            the same look and feel across all Blocks.
            </summary>
            <returns>A <see cref="T:System.Windows.Controls.FlowDocumentScrollViewer"/> containing a properly initialized document.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Block.GetBlockTypeName">
            <summary>
            Gets the BlockTypeName property for this type of metadata block.
            </summary>
            <returns>A string containing the block type name, as per the FLAC specification or "???" for unknown-type blocks.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Block.BlockType">
            <summary>
            Gets the type of the block.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Block.BlockTypeName">
            <summary>
            Gets the official name of the block, as per the FLAC specification.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Block.RawData">
            <summary>
            Gets the byte array that represents the block. 
            </summary>
            <remarks>If you override this property,
            you may have to also override the <see cref="P:mjuAudio.Flac.Metadata.Block.Length"/> property.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Block.Length">
            <summary>
            Gets the length of the byte array that represents the block.
            </summary>
            <remarks>This property may have to be overridden if you override <see cref="P:mjuAudio.Flac.Metadata.Block.RawData"/>.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Metadata.VorbisComment"/> block from a byte array.
            </summary>
            <param name="byteArray">
            A byte array containing the binary representation of a VorbisComment block.
            </param>
            <exception cref="T:System.ApplicationException">This exception is thrown if
            the byte array represents an ill-formatted VORBIS_COMMENT block.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Metadata.VorbisComment"/> block from scratch.
            </summary>
            <param name="vendorString">The vendor string for this new VorbisComment block</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.AddComment(System.String,System.String)">
            <summary>
            Adds a comment to the existing list, keeping the list sorted by name then value.
            </summary>
            <param name="name">The field name of the comment to be added.</param>
            <param name="value">The value of the comment to be added.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.AddComment(System.String,System.Object)">
            <summary>
            Adds a comment to the existing list, keeping the list sorted by name then value.
            </summary>
            <param name="name">The field name of the comment to be added.</param>
            <param name="value">The object whose string representation (obtained from Object.ToString()) will be used as value.</param>
            <remarks>If <paramref name="value"/> is null, an empty comment is created.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.AddComments``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a series of comments sharing a common field name.
            </summary>
            <typeparam name="T">The type of the elements to be converted to comments.</typeparam>
            <param name="name">The (common) field name of the comment to be added.</param>
            <param name="objList">A typed list of objects that will be converted to strings
            by means of their standard <see cref="M:System.Object.ToString"/> method and
            added as comments.</param>
            <remarks>This will result in a series of key/value pairs being created, all sharing the same 
            key. If the list is empty, no comment is created.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.RemoveAllComments(System.String)">
            <summary>
            Removes all comments bearing the same name.
            </summary>
            <param name="name">The field name of the comments to be removed.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.Contains(System.String)">
            <summary>
            Checks whether the block contains at least one comment with a given name.
            </summary>
            <param name="name">The name to look for</param>
            <returns><c>true</c> if <paramref name="name"/> is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.MergeWith(mjuAudio.Flac.Metadata.VorbisComment)">
            <summary>
            Merges another <see cref="T:mjuAudio.Flac.Metadata.VorbisComment"/> block into this instance.
            </summary>
            <param name="vc">The VorbisComment block to be merged.</param>
            <remarks>The effect of the merge is to take all comments in <paramref name="vc"/>, and add
            them to the collection of comments of the instance on which the method is called.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.ToString">
            <summary>
            Returns a string representation of this <see cref="T:mjuAudio.Flac.Metadata.VorbisComment"/> block.
            </summary>
            <returns>A string containing a representation of this VorbisComment block instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.GetHumanReadableRepresentation">
            <summary>
            Gets a DataGrid containing a human-readable representation of the VorbisComment block.
            </summary>
            <returns>A <see cref="T:System.Windows.Controls.DataGrid"/> suitable for inclusion into a WPF UI.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.GetBlockTypeName">
            <summary>
            Gets the BlockTypeName property for this type of metadata block.
            </summary>
            <returns>"VORBIS_COMMENT".</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.VorbisComment.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through all Vorbis comments.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;KeyValuePair&lt;string, string&gt;&gt;</see>
            that can be used to iterate through all Vorbis comments.
            </returns>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.VorbisComment.VendorString">
            <summary>
            Gets or sets the Vendor string.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.VorbisComment.Item(System.String)">
            <summary>
            Gets the list of all comments bearing the same field name.
            </summary>
            <param name="name">The field name</param>
            <returns>A list of all comments</returns>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.VorbisComment.FieldNames">
            <summary>
            Gets the collection of all field names in the block. Field names are produced only once, even if several
            comments bear the same field name.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.VorbisComment.Count">
            <summary>
            Gets the number of comments in the block.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.VorbisComment.RawData">
            <summary>
            Gets the raw binary representation of the VORBIS_COMMENT block.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.VorbisComment.Length">
            <summary>
            Gets the size of raw binary data, in bytes.
            </summary>
        </member>
        <member name="E:mjuAudio.Flac.Metadata.VorbisComment.CollectionChanged">
            <summary>
            Represents the method that handles the CollectionChanged event. 
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ArtistKey">
            <summary>
            The standard key for Artist information
            (format: displayName [\0 sortName] [| url])
            </summary>
            <value>"ARTIST"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ArtistUrlKey">
            <summary>
            The standard key for Artist URL information
            </summary>
            <value>"ARTIST_URL"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.CuesheetKey">
            <summary>
            The standard key for Cuesheet information
            </summary>
            <value>"CUESHEET"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.AlbumTitleKey">
            <summary>
            The standard key for Album title information
            (value format: displayName [\0 sortName] [| url])
            </summary>
            <value>"ALBUM"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.AlbumUrlKey">
            <summary>
            The standard key for Album URL information
            </summary>
            <value>"ALBUM_URL"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.GenreKey">
            <summary>
            The standard key for Genre information
            </summary>
            <value>"GENRE"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.YearKey">
            <summary>
            The standard key for Year information
            </summary>
            <value>"DATE"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.LogKey">
            <summary>
            The standard key for Log information
            </summary>
            <value>"LOG"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.BandKey">
            <summary>
            The standard key for Band/Orchestra information
            </summary>
            <value>"BAND"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.PerformerKey">
            <summary>
            The standard key for Performer information
            (format: performerName [| instrumentName/Role] [\0 performerSortName])
            </summary>
            <value>"PERFORMER"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.UIDKey">
            <summary>
            The standard key for Unique ID information
            (format: nameSpace|ID)
            </summary>
            <value>UID</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.AlbumGainKey">
            <summary>
            The standard key for ReplayGain album gain
            (format: {+/-}0.00 dB)
            </summary>
            <value>"REPLAYGAIN_ALBUM_GAIN"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.AlbumPeakKey">
            <summary>
            The standard key for ReplayGain album gain
            (format: a float between 0 an 1)
            </summary>
            <value>"REPLAYGAIN_ALBUM_PEAK"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.LegacyTrackPerformerPrefix">
            <summary>
            The prefix for track performer keys
            </summary>
            <value>"PERFORMER_TRACK-"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.LegacyTrackOrchestraPrefix">
            <summary>
            The prefix for track orchestra keys.
            </summary>
            <value>"BAND_TRACK-"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.LegacyTrackGenrePrefix">
            <summary>
            The prefix for track genre keys.
            </summary>
            <value>"GENRE_TRACK-"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ForeignTrackTitleKey">
            <summary>
            An often used key for track title, for opening files that have not been previously edited by FlacInfo.
            E.g., Qobuz tracks.
            </summary>
            <value>"TITLE"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ForeignTrackNumberKey">
            <summary>
            An often used key for track numbers, for opening files that have not been previously edited by FlacInfo.
            E.g., Qobuz tracks.
            </summary>
            <value>"TRACKNUMBER"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ForeignTrackGainKey">
            <summary>
            A often used key to store track replay gain in single track files.
            E.g., this key is generated by flac.exe when it creates a FLAC file and computes the replay gain.
            </summary>
            <value>"REPLAYGAIN_TRACK_GAIN"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ForeignTrackPeakKey">
            <summary>
            A often used key to store track peak sample value in single track files.
            E.g., this key is generated by flac.exe when it creates a FLAC file and computes the replay gain.
            </summary>
            <value>"REPLAYGAIN_TRACK_PEAK"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ForeignDiscNumberKey">
            <summary>
            An often used key for disc numbers, for opening files that have not been previously edited by FlacInfo.
            E.g., Qobuz tracks.
            </summary>
            <value>"DISCNUMBER"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ForeignDiscTotalKey">
            <summary>
            An often used key for total number of discs in the set, for opening files that have not been previously edited by FlacInfo.
            E.g., Qobuz tracks.
            </summary>
            <value>"DISCTOTAL"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.TrackPrefix">
            <summary>
            The prefix for track-related information
            </summary>
            <value>"TRACK"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.TrackListSuffix">
            <summary>
            The suffix for opus track list
            </summary>
            <value>"TRACKLIST"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.TitleSuffix">
            <summary>The suffix for track and opus title entries.</summary>
            <value>"TITLE"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.SubTitleSuffix">
            <summary>The suffix for track subtitle entries.</summary>
            <value>"SUBTITLE"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.IndexSuffix">
            <summary>The suffix for track index entries.</summary>
            <value>"INDEX"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.PictureSuffix">
            <summary>The suffix for track or opus picture entries.</summary>
            <value>"PICTURE"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ReplayGainSuffix">
            <summary>
            The suffix for track replay gain.
            </summary>
            <value>"REPLAYGAIN"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.PeakSampleSuffix">
            <summary>
            The suffix for track peak sample value.
            </summary>
            <value>"PEAK"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.FirstTrackSuffix">
            <summary>The suffix for first track number opus entry.</summary>
            <value>"FIRSTTRACK"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.OpusPrefix">
            <summary>
            The prefix for opus-related information
            </summary>
            <value>"OPUS"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ErrorKey">
            <summary>
            The standard key for error messages attached to the file.
            </summary>
            <value>"ERROR"</value>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.MjuNameSpace">
            <summary>
            The mjuWare namespace
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisComment.ForeignArtistKeys">
            <summary>
            A list of tags that may be used to store artist information by other programs.
            E.g., Qobuz tracks.
            </summary>
            <value>{ "COMPOSER", "ALBUMARTIST" }</value>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.#ctor(System.Byte[])">
            <summary>
            Creates a new VorbisComment block from a byte array
            </summary>
            <param name="byteArray">A byte array containing the binary representation of a VorbisComment block</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.#ctor">
            <summary>
            Creates a new VorbisComment block from scratch
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.#ctor(mjuAudio.Flac.Metadata.VorbisComment)">
            <summary>
            Creates a new Info.VorbisComment from a <see cref="T:mjuAudio.Flac.Metadata.VorbisComment"/>.
            </summary>
            <param name="metaVorbis">The <see cref="T:mjuAudio.Flac.Metadata.VorbisComment"/> from which to create a new Info.VorbisComment instance.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.ToString">
            <summary>
            Returns a string representation of the block.
            </summary>
            <returns>A human-readable representation of the VorbisComment block.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.MergeWith(mjuAudio.Flac.Metadata.VorbisComment)">
            <summary>
            Merges another <see cref="T:mjuAudio.Flac.Info.VorbisComment"/> block into this instance.
            </summary>
            <param name="vc">The VorbisComment block to be merged.</param>
            <remarks>The effect of the merge is to take all comments in <paramref name="vc"/>, and add
            them to the collection of comments of the instance on which the method is called.
            If the merged block contains a CUESHEET field, it gets converted to into a 
            proper <see cref="T:mjuAudio.Flac.Info.VorbisCuesheet"/></remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.IsKnownKey(System.String)">
            <summary>
            Gets whether a given key is "known", meaning it participates directly in the information
            structure of the <see cref="T:mjuAudio.Flac.Info.InfoSet"/>.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if <paramref name="key"/> is known, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.GetMaxTrackNumber">
            <summary>
            Returns the maximum track number, as deduced from the vorbis comment field names.
            </summary>
            <returns>The largest track number found in the track comment fields, or -1 is none is found.</returns>
            <remarks>Track numbers are 1-based.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.GetTrackNumberRange">
            <summary>
            Returns the minimum and maximum track numbers found in the vorbis comment field names.
            </summary>
            <returns>A tuple where the first item is the smallest number, and the second one the largest number.</returns>
            <remarks>Track numbers are 1-based.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.GetMaxOpusNumber">
            <summary>
            Returns the maximum opus number, as deduced from the vorbis comment field names.
            </summary>
            <returns>The largest opus number found in the opus comment fields, or -1 is none is found.</returns>
            <remarks>Opus numbers are 0-based.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisComment.GetOpusKeys">
            <summary>
            Returns all valid OPUS keys.
            </summary>
            <returns>An IEnumerable object containing all the OPUS keys contained in this vorbis comment block.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.VorbisComment.Cuesheet">
            <summary>
            Gets or sets the Cuesheet attached to this block
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Info.VorbisComment.MjuID">
            <summary>
            Gets or sets the MjuID for this block. A value of -1 indicates that the block has no MjuID
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Info.VorbisCuesheet">
            <summary>
            A class representing a cue sheet embedded in a VORBIS_COMMENT metadata block,
            as opposed to the CUESHEET metadata block.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet._remSubtitleMarker">
            <summary>A custom keyword to mark the track subtitle. This is legal because it is
            actually used inside a comment (REM prefix).</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet._remSortAsMarker">
            <summary>A custom keyword to mark the track sort title. This is legal because it is
            actually used inside a comment (REM prefix).</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet._remArtistSortAsMarker">
            <summary>A custom keyword to mark the performer sort name. This is legal because it is
            actually used inside a comment (REM prefix).
            This is supposed to follow the PERFORMER line, and to refer to the last PERFORMER line found.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet._remTrackGainMarker">
            <summary>
            A custom keyword to mark the track replay gain. 
            This is a keyword used inside a comment. 
            This keyword is actually used by Foobar2000.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet._remTrackPeakMarker">
            <summary>
            A custom keyword to mark the track peak. 
            This is a keyword used inside a comment. 
            This keyword is actually used by Foobar2000.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.IndexMarker">
            <summary>Cuesheet INDEX keyword.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.Tracks">
            <summary>The list of tracks referenced in the cuesheet.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.EacGenre">
            <summary>The genre, as reported in EAC-created cuesheets.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.EacDate">
            <summary>The date, as reported in EAC-created cuesheets.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.EacDiscID">
            <summary>The disc ID, as reported in EAC-created cuesheets.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.EacComment">
            <summary>The comment, as reported in EAC-created cuesheets.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.Artist">
            <summary>The artist (PERFORMER) reported in the cuesheet.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.Title">
            <summary>The TITLE reported in the cuesheet.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.File">
            <summary>The name of the file referenced by the cuesheet.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.AlbumGain">
            <summary>The album replay gain.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Info.VorbisCuesheet.AlbumPeak">
            <summary>The album peak value.</summary>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisCuesheet.#ctor(System.String)">
            <summary>
            Builds a Vorbis cuesheet object from a text representation.
            </summary>
            <param name="Cuesheet">The text representation of the Vorbis cuesheet object to create.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisCuesheet.#ctor(mjuAudio.Flac.FlacFile)">
            <summary>
            Builds a VorbisCuesheet for a FLAC file.
            </summary>
            <param name="flacFile">The <see cref="T:mjuAudio.Flac.FlacFile"/> to build the VorbisCuesheet from.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisCuesheet.#ctor(mjuAudio.Flac.Info.InfoSet,System.String)">
            <summary>
            Builds a cuesheet from an InfoSet.
            </summary>
            <param name="infoSet">The <see cref="P:mjuAudio.Flac.Info.VorbisCuesheet.InfoSet"/> to build the cuesheet from.</param>
            <param name="fileName">The name of the file to be referenced in the cuesheet.</param>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisCuesheet.ToString">
            <summary>
            Returns the cuesheet text.
            </summary>
            <returns>The cuesheet text.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisCuesheet.Import(mjuAudio.Flac.FlacFile,System.String,System.Text.Encoding)">
            <summary>
            Imports a cuesheet from a file.
            </summary>
            <param name="flacFile">The <see cref="T:mjuAudio.Flac.FlacFile"/> where to import the cuesheet.</param>
            <param name="importFileName">The name of the file containing the cuesheet to be imported.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> used by the cuesheet file.</param>
            <remarks>Creates the CUESHEET comment in the Vorbis block, and overrides relevant Vorbis comment fields.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Info.VorbisCuesheet._escape(System.String)">
            <summary>
            Trims the line to 80 characters max and replaces double quotes with escaped single quotes (\')
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:mjuAudio.Flac.Info.VorbisCuesheet.InfoSet">
            <summary>The InfoSet this cuesheet is relevant to.</summary>
        </member>
        <member name="T:mjuAudio.Flac.MD5Engine">
            <summary>
            Implements the <a href="http://en.wikipedia.org/wiki/MD5">MD5 
            hash algorithm</a>. 
            </summary>
            <remarks>
            The .NET <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider"/>
            implementation is not used because it does not allow for on-the-fly data accumulation.
            <para>The MD5 algorithm was developped by Pr. Ron Rivest of MIT. 
            The FlacNetLib implementation is inspired from the one
            provided with the reference libFlac implementation.</para>
            </remarks>
        </member>
        <member name="M:mjuAudio.Flac.MD5Engine.#ctor(System.UInt32)">
            <summary>
            Creates a new MD5 computation engine.
            </summary>
            <param name="bytesPerSample">The number of bytes per audio sample. Defaults to 2.</param>
            <remarks> This MD5 implementation only supports samples that consist in an integer number of bytes
            (e.g., 8 bits, 16bits, 24 bits, etc...).</remarks>
            <example>See <see cref="M:mjuAudio.Flac.MD5Engine.Accumulate(System.Int32[][])"/>.</example>
        </member>
        <member name="M:mjuAudio.Flac.MD5Engine.Accumulate(System.Int32[][])">
            <summary>
            Concatenates data with the previous, and performs a partial MD5 hash computation.
            </summary>
            <param name="audioData">A 2-dimensional array of audio data. The first index
            is the channel number, the second one the sample number.</param>
            <example>
            A typical use of <see cref="T:mjuAudio.Flac.MD5Engine"/> is shown below. It consists of a call to the constructor
            to create the computation engine, one or several calls to Accumulate(), followed by a call to 
            <see cref="M:mjuAudio.Flac.MD5Engine.FinalizeHash"/> to conclude the sequence.
            <code>
            FlacFile f = new FlacFile(@"c:\sample.flac");
            mjuAudio.Flac.Audio.BitStream bitStream = new mjuAudio.Flac.Audio.BitStream(f.FullName, f.FirstFrameOffset);
            mjuAudio.Flac.Audio.Frame frame = new mjuAudio.Flac.Audio.Frame(f.StreamInfo, bitStream);
            int[][] outData = frame.Decode(0, 999); // get the first 1000 samples from the frame
            MD5Engine md5 = new MD5Engine();
            md5.Accumulate(outData);
            outData = frame.Decode(1000, 1999); // get the next 1000 samples from the frame
            md5.Accumulate(outData);
            md5.FinalizeHash();
            Console.WriteLine(md5.HashString);
            </code>
            Note that the above is of limited use. A typical MD5 computation on the FLAC file will involve
            the complete audio data, in order to be able to relate to the MD5 hash value stored in the
            STREAMINFO block.
            </example>
        </member>
        <member name="M:mjuAudio.Flac.MD5Engine.FinalizeHash">
            <summary>
            Finalizes the MD5 hash computation.
            </summary>
            <remarks>
            See <see cref="M:mjuAudio.Flac.MD5Engine.Accumulate(System.Int32[][])"/> for an example showing FinalizeHash() use.
            </remarks>
        </member>
        <member name="P:mjuAudio.Flac.MD5Engine.Hash">
            <summary>
            Gets the MD5 hash value, as a byte array.
            </summary>
            <value>Returns <c>null</c> until <see cref="M:mjuAudio.Flac.MD5Engine.FinalizeHash"/> has been called.</value>
        </member>
        <member name="P:mjuAudio.Flac.MD5Engine.HashString">
            <summary>
            Gets the MD5 hash value, as a string.
            </summary>
            <value>Returns <c>null</c> until <see cref="M:mjuAudio.Flac.MD5Engine.FinalizeHash"/> has been called.</value>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.Header">
            <summary>
            Represents a metadata block header.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Metadata.Header.Length">
            <summary>
            Gets the metadata header length, in bytes.
            </summary>
            <value>Always returns 4.</value>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Header.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:mjuAudio.Flac.Metadata.Header"/> class from a 4-byte array.
            </summary>
            <param name="byteArray">A 4-byte array that represents a metadata block header.</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the length of the byte array is not 4.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Header.#ctor(mjuAudio.Flac.Metadata.Block,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:mjuAudio.Flac.Metadata.Header"/> class for a given block.
            </summary>
            <param name="b">A metadata block to create the header for.</param>
            <param name="lastBlock"><c>true</c> to set the last block flag; <c>false</c> otherwise.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This exception is thrown if the block size 
            exceeds the maximum 2<span style="vertical-align:super;font-size:smaller;">24</span> bytes.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Header.ToString">
            <summary>
            Gets a human-readable string describing the <see cref="T:mjuAudio.Flac.Metadata.Header"/>.
            </summary>
            <returns>A string describing the Header.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Header.GetBytes">
            <summary>
            Gets a 4-byte array representing the metadata block header.
            </summary>
            <returns>A 4-byte array representing the metadata block header.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Header.LastBlock">
            <summary>
            Gets or sets whether this is the last metadata block.
            </summary>
            <remarks>Returns <c>true</c> if the last-metadata-block flag is set (in other words,
            if this is the last metadata block before the audio blocks), <c>false</c> otherwise.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Header.BlockType">
            <summary>
            Gets the block type.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Header.DataLength">
            <summary>
            Gets the length of the related data.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.Padding">
            <summary>
            A class representing a metadata PADDING block
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Padding.#ctor(System.Byte[])">
            <summary>
            Creates a padding block from a byte array.
            </summary>
            <param name="byteArray">The byte array representing the block raw data.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Padding.#ctor(System.Int32)">
            <summary>
            Creates a padding block of a given size.
            </summary>
            <param name="length">The size of the block in bytes.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Padding.GetHumanReadableRepresentation">
            <summary>
            Gets a FlowDocumentScrollViewer containing a human-readable representation of the metadata block.
            </summary>
            <returns>A <see cref="T:System.Windows.FrameworkElement"/> suitable for inclusion into a WPF UI. It may 
            be for example a <see cref="T:System.Windows.Controls.DataGrid"/> or a <see cref="T:System.Windows.Controls.FlowDocumentScrollViewer"/>.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Padding.GetBlockTypeName">
            <summary>
            Gets the BlockTypeName property for this type of metadata block.
            </summary>
            <returns>"PADDING".</returns>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.Picture">
            <summary>
            Represents a PICTURE metadata block.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Metadata.Picture.MaxPicType">
            <summary>
            Gets the largest <see cref="P:mjuAudio.Flac.Metadata.Picture.PictureType"/> value in a PICTURE metadata block.
            </summary>
            <value>Returns 20 for the time being.
               Refer to the <a href="http://flac.sourceforge.net/format.html#metadata_block_picture">
               FLAC specification</a> for a list of all supported picture type values.</value>
        </member>
        <member name="F:mjuAudio.Flac.Metadata.Picture._internalStream">
            <summary>
            Marks whether the memory stream containing picture data has been created by this instance (i.e. is "internal").
            </summary>
            <remarks>In case the stream is internal, we need to dispose of it when garbage
            collection reclaims this instance; this is done in the destructor.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.#ctor(System.Byte[])">
            <summary>
            Builds a new Picture metadata block from raw binary data.
            </summary>
            <param name="byteArray">The byte array containing the raw data.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.#ctor(System.String,System.Int32,System.IO.MemoryStream)">
            <summary>
            Builds a new <see cref="T:mjuAudio.Flac.Metadata.Picture"/> metadata block from a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="description">A description string for the picture.</param>
            <param name="type">The picture's type, as per the FLAC specification.</param>
            <param name="stream">The stream containing the bitmap data.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Builds a new <see cref="T:mjuAudio.Flac.Metadata.Picture"/> metadata block from a bitmap file.
            </summary>
            <param name="description">A description string for the picture.</param>
            <param name="type">The picture's type, as per the FLAC specification.</param>
            <param name="fileName">The path to a bitmap file.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.Finalize">
            <summary>
            The destructor.
            </summary>
            <remarks>Frees the buffer attached to the internal stream containing the picture data, if any.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String)">
            <summary>
            Updates the description for this <see cref="T:mjuAudio.Flac.Metadata.Picture"/> instance.
            </summary>
            <param name="description">The description string for this instance.</param>
            <remarks>If you need to update both the <see cref="P:mjuAudio.Flac.Metadata.Picture.Description"/> and <see cref="P:mjuAudio.Flac.Metadata.Picture.PictureType"/>,
            use <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String,System.Int32)"/> for the sake of performance, rather
            than calling <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.Int32)"/> in addition to this call.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.Int32)">
            <summary>
            Updates the picture type for this <see cref="T:mjuAudio.Flac.Metadata.Picture"/> instance.
            </summary>
            <param name="type">The picture type for this instance (as per the FLAC specification)</param>
            <remarks>If you need to update both the <see cref="P:mjuAudio.Flac.Metadata.Picture.Description"/> and <see cref="P:mjuAudio.Flac.Metadata.Picture.PictureType"/>,
            use <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String,System.Int32)"/> for the sake of performance, rather
            than calling <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String)"/> in addition to this call.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String,System.Int32)">
            <summary>
            Updates the description and picture type for this <see cref="T:mjuAudio.Flac.Metadata.Picture"/> instance.
            </summary>
            <param name="description">The description string for this instance.</param>
            <param name="type">The picture type for this instance (as per the FLAC specification).</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.ToString">
            <summary>
            Gets a string that represents the current <see cref="T:mjuAudio.Flac.Metadata.Picture"/> block.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.Clone">
            <summary>
            Gets a full copy of this <see cref="T:mjuAudio.Flac.Metadata.Picture"/> instance.
            </summary>
            <returns>A new Picture object, identical to the original.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.GetHumanReadableRepresentation">
            <summary>
            Provides a human-readable representation of the picture block.
            </summary>
            <returns>A <see cref="T:System.Windows.FrameworkElement"/> containing a human-readable representation of the picture block.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.GetImageHashCode">
            <summary>
            Gets a base64-encoded hash-value for the <see cref="T:System.Windows.Controls.Image"/> contained in this <see cref="T:mjuAudio.Flac.Metadata.Picture"/> instance.
            </summary>
            <returns>The hash code for the image.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.GetBlockHashCode">
            <summary>
            Gets a base64-encoded hash-value for the entire <see cref="T:mjuAudio.Flac.Metadata.Picture"/> instance (Image + PictureType + Description).
            </summary>
            <returns>The hash code for this Picture instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.GetBlockTypeName">
            <summary>
            Gets the BlockTypeName property for this type of metadata block.
            </summary>
            <returns>"PICTURE".</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.Equals(mjuAudio.Flac.Metadata.Picture)">
            <summary>
            Indicates whether the current <see cref="T:mjuAudio.Flac.Metadata.Picture"/> is equal to another one.
            </summary>
            <param name="other">The other <see cref="T:mjuAudio.Flac.Metadata.Picture"/>.</param>
            <returns><c>true</c> if the current <see cref="T:mjuAudio.Flac.Metadata.Picture"/> is equal to the <paramref name="other"/> one; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.op_Equality(mjuAudio.Flac.Metadata.Picture,mjuAudio.Flac.Metadata.Picture)">
            <summary>
            Checks whether two <see cref="T:mjuAudio.Flac.Metadata.Picture"/> objects are equal.
            </summary>
            <param name="p1">The first Picture object.</param>
            <param name="p2">The second Picture object.</param>
            <returns><c>true</c>if both Picture objects are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.op_Inequality(mjuAudio.Flac.Metadata.Picture,mjuAudio.Flac.Metadata.Picture)">
            <summary>
            Checks whether two <see cref="T:mjuAudio.Flac.Metadata.Picture"/> objects are different.
            </summary>
            <param name="p1">The first Picture object.</param>
            <param name="p2">The second Picture object.</param>
            <returns><c>true</c>if the Picture objects are different; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.Equals(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:mjuAudio.Flac.Metadata.Picture"/> is equal to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns><c>true</c> if the current <see cref="T:mjuAudio.Flac.Metadata.Picture"/> is equal to the <paramref name="obj"/> parameter; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.Picture.GetHashCode">
            <summary>
            Overrides the original <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>A hash code for the current object.</returns>
            <remarks>Preference should be given to <see cref="M:mjuAudio.Flac.Metadata.Picture.GetBlockHashCode"/>().</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.PictureType">
            <summary>Gets the picture type value.</summary>
            <remarks>Refer to the <a href="http://flac.sourceforge.net/format.html#metadata_block_picture">
               FLAC specification</a> for a list of all supported values.<br/>
               Use <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.Int32)"/> or <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String,System.Int32)"/> to update the Description.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.MimeType">
            <summary>Gest the picture's Mime type.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.Description">
            <summary>Gets the picture's description string.</summary>
            <remarks>Use <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String)"/> or <see cref="M:mjuAudio.Flac.Metadata.Picture.SetDetails(System.String,System.Int32)"/> to update the Description.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.Width">
            <summary>Gets the picture width, in pixels.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.Height">
            <summary>Gets the picture height, in pixels.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.ColorDepth">
            <summary>Gets the picture's color depth, in bits.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.PaletteCount">
            <summary>Gets the number of colors in the picture palette (0 for non-indexed formats).</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.BitmapSource">
            <summary>Gets the actual device-independent picture.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.BitmapStream">
            <summary>Gets the stream equivalent to what is/would be stored to file.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.PictureURL">
            <summary>Gets the picture's URL, for linked picture cases.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.Picture.DataSize">
            <summary>Gets the total size of the picture binary data, in bytes.</summary>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.SeekPoint">
            <summary>
            Represents a seek point in the seek table.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekPoint.CompareTo(mjuAudio.Flac.Metadata.SeekPoint)">
            <summary>
            Compares two <see cref="T:mjuAudio.Flac.Metadata.SeekPoint"/>s based on the values of the <see cref="P:mjuAudio.Flac.Metadata.SeekPoint.SampleNumber"/> property.
            </summary>
            <param name="other">The SeekPoint to compare to the current instance.</param>
            <returns>-1 if this instance has a smaller SampleNumber, +1 if it has a larger SampleNumber, 0 if both SampleNumbers
            are equal.</returns>
        </member>
        <member name="F:mjuAudio.Flac.Metadata.SeekPoint.SeekPointSize">
            <summary>
            Gets the size of a SeekPoint in the metadata block binary representation.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.SeekPoint.SampleNumber">
            <summary>
            Gets or sets the sample number of the first sample in the target frame.
            </summary>
            <remarks>Place holder seek points have a sample number set to <c>0xffffffffffffffff</c>.</remarks>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.SeekPoint.Offset">
            <summary>
            Gets or sets the offset in bytes from the first byte of the first frame header in the file,
            to the first byte of the target frame header.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.SeekPoint.SamplesInFrame">
            <summary>
            Gets or sets the number of samples in the target frame.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.SeekTable">
            <summary>
            A class representing a SEEKTABLE metadata block
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Metadata.SeekTable"/> from a byte array.
            </summary>
            <param name="byteArray">The byte array representing the data part of the block.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.#ctor(System.Collections.Generic.IEnumerable{mjuAudio.Flac.Metadata.SeekPoint})">
            <summary>
            Creates a new SeekTable from a list of <see cref="T:mjuAudio.Flac.Metadata.SeekPoint"/>s.
            </summary>
            <param name="seekPoints">An <see cref="T:System.Collections.IEnumerable"/> containing the seek points.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of all seek points.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;SeekPoint&gt;</see>
            that can be used to iterate through the seek points.
            </returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.Add(mjuAudio.Flac.Metadata.SeekPoint)">
            <summary>
            Adds a <see cref="T:mjuAudio.Flac.Metadata.SeekPoint"/> to the <see cref="T:mjuAudio.Flac.Metadata.SeekTable"/>.
            </summary>
            <param name="seekPoint">The <see cref="T:mjuAudio.Flac.Metadata.SeekPoint"/> to add.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.GetHumanReadableRepresentation">
            <summary>
            Gets a DataGrid containing a human-readable representation of the Seek Table.
            </summary>
            <returns>A <see cref="T:System.Windows.FrameworkElement"/> suitable for inclusion into a WPF UI. It may 
            be for example a <see cref="T:System.Windows.Controls.DataGrid"/> or a <see cref="T:System.Windows.Controls.FlowDocumentScrollViewer"/>.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.GetBlockTypeName">
            <summary>
            Gets the BlockTypeName property for this type of metadata block.
            </summary>
            <returns>"SEEKTABLE".</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.SeekTable.Create(mjuAudio.Flac.FlacFile,System.Double,System.Func{System.Int32,System.Boolean})">
            <summary>
            Creates a new seek table for a given FLAC file, with regularly spaced seek points.
            </summary>
            <param name="f">The <see cref="T:mjuAudio.Flac.FlacFile"/> for which to create the seek table.</param>
            <param name="interval">The interval between seek points, in seconds. Defaults to 10.</param>
            <param name="callBack">A callback function to be called for every seek point created.</param>
            <remarks>This may be a lengthy operation, depending on the size of the FLAC file.
            The callback allows the calling party to track progress and cancel the operation as necessary.
            The parameter passed to the callback is the number of seek points added
            so far. If the callback returns <c>false</c>, the seek table creation is cancelled and <c>null</c>
            is returned.</remarks>
            <returns>A new populated <see cref="T:mjuAudio.Flac.Metadata.SeekTable"/>, or <c>null</c> if the operation was cancelled.</returns>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.SeekTable.Item(System.Int32)">
            <summary>
            Gets a seek point from the seek table.
            </summary>
            <param name="index">The number of the seekpoint to return.</param>
            <returns></returns>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.SeekTable.Count">
            <summary>
            Gets the number of seekpoints in the table.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Metadata.StreamInfo">
            <summary>
             Represents a STREAMINFO metadata block.
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.StreamInfo.#ctor(System.Byte[])">
            <summary>
            Creates a StreamInfo object from raw binary data.
            </summary>
            <param name="byteArray">The array containing the STREAMINFO binary representation.</param>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.StreamInfo.GetHumanReadableRepresentation">
            <summary>
            Gets a human-readable representation of the STREAMINFO block.
            </summary>
            <returns>A <see cref="T:System.Windows.FrameworkElement"/> containing a human-readable representation of the STREAMINFO block.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Metadata.StreamInfo.GetBlockTypeName">
            <summary>
            Gets the BlockTypeName property for this type of metadata block.
            </summary>
            <returns>"STREAMINFO"</returns>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.MinBlockSize">
            <summary>Gets the minimum block size (in samples) used in the stream.</summary>
            <seealso cref="P:mjuAudio.Flac.Metadata.StreamInfo.MaxBlockSize"/>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.MaxBlockSize">
            <summary>Gets the maximum block size (in samples) used in the stream.</summary>
            <seealso cref="P:mjuAudio.Flac.Metadata.StreamInfo.MinBlockSize"/>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.MinFrameSize">
            <summary>Gets the minimum frame size (in bytes) used in the stream.</summary>
            <remarks>May be 0 to imply the value is not known.</remarks>
            <seealso cref="P:mjuAudio.Flac.Metadata.StreamInfo.MaxFrameSize"/>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.MaxFrameSize">
            <summary>Gets the maximum frame size (in bytes) used in the stream.</summary>
            <remarks>May be 0 to imply the value is not known.</remarks>
            <seealso cref="P:mjuAudio.Flac.Metadata.StreamInfo.MinFrameSize"/>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.SampleRate">
            <summary>Gets the file sample rate, in samples per second.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.NumberOfChannels">
            <summary>Gets the number of channels.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.SampleSize">
            <summary>Gets the sample size, in bits per sample.</summary>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.NumberOfSamples">
            <summary>Gets the number of total samples in the stream.</summary>
            <remarks>'Samples' means inter-channel sample,
            i.e., one second of 44.1ksamples/s audio will have 44100 samples regardless of the number of channels.
            <para>A value of zero here means the number of total samples is unknown.</para></remarks>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.MD5Signature">
            <summary>Gets the MD5 signature of the unencoded audio data.</summary>
            <seealso cref="P:mjuAudio.Flac.Metadata.StreamInfo.MD5String"/>
        </member>
        <member name="P:mjuAudio.Flac.Metadata.StreamInfo.MD5String">
            <summary>Gets a string representation of the MD5 signature of the unencoded audio data.</summary>
            <seealso cref="P:mjuAudio.Flac.Metadata.StreamInfo.MD5Signature"/>
        </member>
        <member name="T:mjuAudio.Flac.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Properties.Resources.CopyrightNotice">
             <summary>
               Looks up a localized string similar to ******************************************************************************************
                © Copyright 2007-2011 Pierre-Yves Thoulon
            
                This file is part of FlacNetLib.
            
                FlacNetLib is free software: you can redistribute it and/or modify
                it under the terms of the GNU General Public License as published by
                the Free Software Foundation, either version 3 of the License, or
                (at your option) any later version.
            
                FlacNetLib is distributed in the hope that it will be useful,
                 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:mjuAudio.Flac.Properties.Resources.License">
             <summary>
               Looks up a localized string similar to                    GNU LESSER GENERAL PUBLIC LICENSE
                                   Version 3, 29 June 2007
            
             Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;
             Everyone is permitted to copy and distribute verbatim copies
             of this license document, but changing it is not allowed.
            
            
              This version of the GNU Lesser General Public License incorporates
            the terms and conditions of version 3 of the GNU General Public
            License, supplemented by the additional permissions listed below.
            
              0. Additional Def [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:mjuAudio.Flac.GlobalInfo">
            <summary>
            Defines various constants used throughout the library.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.GlobalInfo.LanguageBase">
            <summary>
            Gets the resource base name for <see cref="T:System.Resources.ResourceManager"/> objects.
            </summary>
            <value>"mjuAudio.Flac.LanguageFiles.strings"</value>
        </member>
        <member name="F:mjuAudio.Flac.GlobalInfo.LanguageDLL">
            <summary>
            Gets the name of the resource DLL for <see cref="T:System.Resources.ResourceManager"/> objects.
            </summary>
            <value>"FlacNetlib.resources.dll"</value>
        </member>
        <member name="F:mjuAudio.Flac.GlobalInfo.MaxBlockSize">
            <summary>
            Gets the maximum audio block size, as per the 
            <a href="http://flac.sourceforge.net/format.html">FLAC specification</a>.
            </summary>
            <value>65535</value>
        </member>
        <member name="F:mjuAudio.Flac.GlobalInfo.MaxChannels">
            <summary>
            Maximum number of channels in a frame, as per the
            <a href="http://flac.sourceforge.net/format.html">FLAC specification</a>.
            </summary>
            <value>8</value>
        </member>
        <member name="F:mjuAudio.Flac.GlobalInfo.EmptyUrl">
            <summary>
            A place holder string to replace empty artist URLs
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.GlobalInfo.MimeType">
            <summary>
            Gets a list of mime types, indexed by format GUID.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.GlobalInfo.ResourceManager">
            <summary>
            A static reference to the library's resource manager.
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.BlockType">
            <summary>
            Represents the various metadata block types.
            </summary>
            <remarks>The base type of this enumeration is <see cref="T:System.Byte"/>. When casting one of the
            enumeration members to an integer type, the number that you get is as per the 
            <a href="http://flac.sourceforge.net/format.html#metadata_block_header">FLAC specification</a>.
            </remarks>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.StreamInfo">
            <summary>STREAMINFO block.</summary>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.Padding">
            <summary>PADDING block.</summary>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.Application">
            <summary>APPLICATION block.</summary>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.SeekTable">
            <summary>SEEKTABLE block.</summary>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.VorbisComment">
            <summary>VORBIS_COMMENT block.</summary>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.CueSheet">
            <summary>CUESHEET block.</summary>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.Picture">
            <summary>PICTURE block.</summary>
        </member>
        <member name="F:mjuAudio.Flac.BlockType.Invalid">
            <summary>Reserved.</summary>
        </member>
        <member name="T:mjuAudio.Flac.TimeUnit">
            <summary>
            Represents a unit in which time can be expressed.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.TimeUnit.Minute">
            <summary>Time expressed in minutes.</summary>
        </member>
        <member name="F:mjuAudio.Flac.TimeUnit.Second">
            <summary>Time expressed in seconds.</summary>
        </member>
        <member name="F:mjuAudio.Flac.TimeUnit.Frame">
            <summary>Time expressed in frames.</summary>
        </member>
        <member name="T:mjuAudio.Flac.Time">
            <summary>
            Represents a time as a number of minutes, seconds, and frames.
            </summary>
            <remarks>A frame corresponds to a 
            <a href="http://en.wikipedia.org/wiki/Red_Book_%28audio_CD_standard%29">Red Book Audio CD sector</a>;
            there are 75 such frames per second of audio data.</remarks>
        </member>
        <member name="F:mjuAudio.Flac.Time.FramesPerSecond">
            <summary>The number of frames contained in a second.</summary>
        </member>
        <member name="F:mjuAudio.Flac.Time.Minute">
            <summary>The number of minutes in the canonical representation of the structure</summary>
        </member>
        <member name="F:mjuAudio.Flac.Time.Second">
            <summary>The number of seconds in the canonical representation of the structure.</summary>
            <value>The returned value is always comprised between 0 and 59 inclusive.</value>
        </member>
        <member name="F:mjuAudio.Flac.Time.Frame">
            <summary>The number of frames in the canonical representation of the structure.</summary>
            <value>The returned value is always comprised between 0 and 74 inclusive.</value>
        </member>
        <member name="F:mjuAudio.Flac.Time.Zero">
            <summary>A <see cref="T:mjuAudio.Flac.Time"/> structure corresponding to time 0.</summary>
        </member>
        <member name="M:mjuAudio.Flac.Time.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Time structure from numbers of minutes, seconds, and frames.
            </summary>
            <param name="minute">The number of minutes.</param>
            <param name="second">The number of seconds.</param>
            <param name="frame">The number of frames.</param>
            <remarks>The numbers used for seconds and frames are arbitrary, i.e., they can 
            be greater than 59 or 74 respectively. The Time structure will be "normalized"
            when created to bring it back to a so-called canonical representation with less than 60 seconds 
            and 75 frames. An example is given below.</remarks>
            <example>
            To illustrate the normalization process, the following code:
            <code>
            Time t = new Time(1,65,80);
            Console.WriteLine(t.ToString());
            </code>
            yields the following output: <c>"02:06:05"</c>
            </example>
        </member>
        <member name="M:mjuAudio.Flac.Time.#ctor(System.Double,mjuAudio.Flac.TimeUnit)">
            <summary>
            Creates a new Time structure of a given duration.
            </summary>
            <param name="value">A duration in a given time unit.</param>
            <param name="unit">The time unit in which the duration is expressed.</param>
        </member>
        <member name="M:mjuAudio.Flac.Time.#ctor(System.String)">
            <summary>
            Creates a new Time structure from a time string.
            </summary>
            <param name="timeString">The time string, formatted as <c>"mm:ss:ff"</c>
            where <c>mm</c> are minutes, <c>ss</c> seconds, and <c>ff</c> frames.</param>
            <exception cref="T:System.ArgumentException">This exception is thrown if the format
            of the time string is incorrect.</exception>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_Addition(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Gets the sum of two Times.
            </summary>
            <param name="a">A Time.</param>
            <param name="b">Another Time.</param>
            <returns>A Time structure representing the sum of the two Times.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_Subtraction(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Gets the difference between two Times.
            </summary>
            <param name="a">A Time that will be substracted from.</param>
            <param name="b">The Time to be substracted from <paramref name="a"/>.</param>
            <returns>A Time structure representing the difference between the two Times.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_Equality(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Checks whether two Times are equal.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand</param>
            <returns>
                <c>true</c> if the operands represent Times of the same duration,
                (e.g., 00:01:00 is equal to 00:00:75,)
                <c>false</c> otherwise.
            </returns>
            <seealso cref="M:mjuAudio.Flac.Time.Equals(System.Object)"/>
            <seealso cref="M:mjuAudio.Flac.Time.Equals(mjuAudio.Flac.Time)"/>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_Inequality(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Checks whether two Times are different.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
                <c>true</c> if the operands represent Times of different durations,
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_GreaterThan(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Compares two Times.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
                <c>true</c> if <paramref name="a"/> represents a longer time
                than <paramref name="b"/>,
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_GreaterThanOrEqual(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Compares two Times.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
                <c>true</c> if <paramref name="a"/> represents a Time longer than,
                or equal to <paramref name="b"/>,
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_LessThan(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Compares two Times.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
                <c>true</c> if <paramref name="a"/> represents a shorter time
                than <paramref name="b"/>,
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.op_LessThanOrEqual(mjuAudio.Flac.Time,mjuAudio.Flac.Time)">
            <summary>
            Compares two Times.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
                <c>true</c> if <paramref name="a"/> represents a time shorter than
                or equal to <paramref name="b"/>,
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.Equals(System.Object)">
            <summary>
            Checks whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns><c>false</c> if <paramref name="obj"/> is not a Time, or is of different duration
            from this instance,
            <c>true</c> if <paramref name="obj"/> is a Time of same duration as this instance.</returns>
            <seealso cref="M:mjuAudio.Flac.Time.Equals(mjuAudio.Flac.Time)"/>
            <seealso cref="M:mjuAudio.Flac.Time.op_Equality(mjuAudio.Flac.Time,mjuAudio.Flac.Time)"/>
        </member>
        <member name="M:mjuAudio.Flac.Time.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <remarks>The hash code is actually the total number of frames that the Time represents. Hence Times of
            equal duration have equal hashcodes.</remarks>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.ToString">
            <summary>
            Gets the time in "mm:ss:ff" format.
            </summary>
            <returns>The time string "mm:ss:ff" where <em>mm</em> represents a number of minutes, <em>ss</em>
            a number of seconds, and <em>ff</em> a number of frames.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.ToFrames">
            <summary>
            Gets the duration of the Time structure in number of frames.
            </summary>
            <returns>The number of frames (always an integer value).</returns>
            <remarks>Because the smaller unit that a Time can be expressed in is frames, 
            this method returns an integer value, unlike <see cref="M:mjuAudio.Flac.Time.ToMinutes"/> and
            <see cref="M:mjuAudio.Flac.Time.ToSeconds"/>.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Time.ToSeconds">
            <summary>
            Gets the duration of the Time structure in number of seconds.
            </summary>
            <returns>The number of seconds (a float).</returns>
            <remarks>Because the smaller unit that a Time can be expressed in is frames, 
            i.e., a fraction of seconds, this method returns an floating point value.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Time.ToMinutes">
            <summary>
            Gets the duration of the Time structure in number of minutes.
            </summary>
            <returns>The number of minutes (a float).</returns>
            <remarks>Because the smaller unit that a Time can be expressed in is frames, 
            i.e., a fraction of minutes, this method returns an floating point value.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Time.Add(System.Int32,mjuAudio.Flac.TimeUnit)">
            <summary>
            Adds a given number of time units to a Time.
            </summary>
            <param name="value">The number of time units to be added.</param>
            <param name="unit">The time unit.</param>
            <returns>The current Time instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.Substract(System.Int32,mjuAudio.Flac.TimeUnit)">
            <summary>
            Substracts a given number of time units from a Time.
            </summary>
            <param name="value">The number of time units to be substracted.</param>
            <param name="unit">The time unit.</param>
            <returns>The current Time instance.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.CompareTo(mjuAudio.Flac.Time)">
            <summary>
            Compares this instance to another Time structure.
            </summary>
            <param name="other">The other Time structure. </param>
            <returns>0 if both Times are equal, 1 if this instance is of greater duration,
            -1 if it is smaller.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Time.Equals(mjuAudio.Flac.Time)">
            <summary>
            Checks whether this instance is equal to a specified Time. 
            </summary>
            <param name="other">The Time to compare with this instance.</param>
            <returns><c>false</c> if <paramref name="other"/> is of duration different
            from that of this instance,
            <c>true</c> otherwise.</returns>
            <seealso cref="M:mjuAudio.Flac.Time.Equals(System.Object)"/>
            <seealso cref="M:mjuAudio.Flac.Time.op_Equality(mjuAudio.Flac.Time,mjuAudio.Flac.Time)"/>
        </member>
        <member name="T:mjuAudio.Flac.Utils.AssemblyInfo">
            <summary>
            Represents an assembly.
            </summary>
            <remarks>This calls allows to retrieve various information about an existing assembly.</remarks>
        </member>
        <member name="M:mjuAudio.Flac.Utils.AssemblyInfo.#ctor">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Utils.AssemblyInfo"/> object for the Entry assembly.
            </summary>
            <seealso cref="M:System.Reflection.Assembly.GetEntryAssembly"/>
        </member>
        <member name="M:mjuAudio.Flac.Utils.AssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Utils.AssemblyInfo"/> object for a given assembly.
            </summary>
            <param name="assyPath">The fully qualified path to the assembly file.</param>
        </member>
        <member name="M:mjuAudio.Flac.Utils.AssemblyInfo.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Utils.AssemblyInfo"/> object for a given assembly.
            </summary>
            <param name="assyName">The AssemblyName representing the assembly.</param>
        </member>
        <member name="M:mjuAudio.Flac.Utils.AssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Creates a new <see cref="T:mjuAudio.Flac.Utils.AssemblyInfo"/> object for a given assembly.
            </summary>
            <param name="assy">The Assembly object for which info is to be retrieved.</param>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.Company">
            <summary>
            Gets the Company attribute for the assembly.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.Copyright">
            <summary>
            Gets the copyright string for the assembly.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.Dir">
            <summary>
            Gets the directory where the assembly resides.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.FileName">
            <summary>
            Gets the name of the file containing the assembly (without the path).
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.FullPath">
            <summary>
            Gets the full path to the assembly.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.InternalName">
            <summary>
            Gets the assembly internal name.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.ProductInfo">
            <summary>
            Gets the product information (Product name and version by convention).
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.ProductName">
            <summary>
            Gets the product name alone, with the version number stripped, if any.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.References">
            <summary>
            Gets the list of this assembly's non-standard references, e.g., excluding the
            mscorlib, System.XXX, and Microsoft.XXX references.
            </summary>
        </member>
        <member name="P:mjuAudio.Flac.Utils.AssemblyInfo.Version">
            <summary>
            Gets the full version string (Major.Minor.Build.Revision).
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Utils.BigEndianConv">
            <summary>
            Provides helper functions to 
            perform various number conversion from/to big endian representations
            (as opposed to the standard Microsoft functions that operate in little endian mode).
            </summary>
        </member>
        <member name="M:mjuAudio.Flac.Utils.BigEndianConv.ToByteArray(System.UInt32)">
            <summary>
            Converts a 32-bit unsigned integer to a 4-byte big-endian array (MSB at index 0).
            </summary>
            <param name="i">The 32-bit unsigned integer to be converted to a byte array.</param>
            <returns>A 4-byte array containing the big endian representation of
            <paramref name="i"/>.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Utils.BigEndianConv.ToByteArray(System.Int32)">
            <summary>
            Converts a 32-bit signed integer to a 4-byte big-endian array (MSB at index 0).
            </summary>
            <param name="i">The 32-bit signed integer to be converted to a byte array.</param>
            <returns>A 4-byte array containing the big endian representation of
            <paramref name="i"/>.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Utils.BigEndianConv.ToByteArray(System.Int16)">
            <summary>
            Converts a 16-bit signed integer to a 2-byte big-endian array (MSB at index 0).
            </summary>
            <param name="i">The 16-bit signed integer to be converted to a byte array.</param>
            <returns>A 2-byte array containing the big endian representation of
            <paramref name="i"/>.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Utils.BigEndianConv.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Converts 4 consecutive bytes of a byte array to a 32-bit signed integer, in big endian notation.
            </summary>
            <param name="ba">The byte array where to fetch the bytes to be converted.</param>
            <param name="start">The index of the first, i.e. most significant, byte.</param>
            <returns>A 32-bit signed integer represented by <paramref name="ba"/>[<paramref name="start"/>]
            through <paramref name="ba"/>[<paramref name="start"/>+3] in big endian notation.</returns>
        </member>
        <member name="T:mjuAudio.Flac.Utils.CrcType">
            <summary>
            The pre-defined CRC types understood by CrcCalc.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Utils.CrcType.CrcCcitt">
            <summary>
            The standard CCITT CRC algoritm.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Utils.CrcType.Crc16">
            <summary>
            The standard CRC-16 algorithm.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Utils.CrcType.Crc32">
            <summary>
            The standard CRC-32 algorithm.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Utils.CrcType.FlacCrc8">
            <summary>
            The CRC-8 algorithm used for FLAC frame headers.
            </summary>
        </member>
        <member name="F:mjuAudio.Flac.Utils.CrcType.FlacCrc16">
            <summary>
            The CRC-16 algorithm used for FLAC frames. 
            </summary>
        </member>
        <member name="T:mjuAudio.Flac.Utils.CrcCalc">
            <summary>
            A class to compute CRCs. 
            </summary>
            <remarks>
            <para>
            Adapted from the
            <a href="http://www.codeproject.com/KB/cs/marcelcrcencoding.aspx">CRCTool project</a>
            from <a href="http://www.codeproject.com/">the Code Project</a>.<br />
            Original copyright notice:<br />
            ***************************************************************************<br />
            Copyright (c) 2003 Thoraxcentrum, Erasmus MC, The Netherlands.
            </para>
            <para>Written by Marcel de Wijs with help from a lot of others, especially Stefan Nelwan.</para>
            <para>This code is for free. I ported it from several different sources to C#.</para>
            <para>For comments: Marcel_de_Wijs@hotmail.com<br />
            ***************************************************************************</para>
            <para>Documentation on CRC computation here:<br />
            http://www.repairfaq.org/filipg/LINK/F_crc_v3.html <br />
            (A Painless Guide to CRC Error Detection Algorithms)</para>
            </remarks>
        </member>
        <member name="M:mjuAudio.Flac.Utils.CrcCalc.#ctor(System.Int32,System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Creates a Crc computation engine for any CRC of order between 1 and 32.
            </summary>
            <param name="order">The CRC polynom order, between 1 and 32.</param>
            <param name="polynom">The CRC polynom, excluding the high order coefficient.</param>
            <param name="init">The init value for the algorithm.</param>
            <param name="finalXor">The final XOR value..</param>
            <param name="reflectIn">If true, the order of the input bits will be reflected before
               processing</param>
            <param name="reflectOut">If true, the CRC will be reflected before the final XOR.</param>
        </member>
        <member name="M:mjuAudio.Flac.Utils.CrcCalc.#ctor(mjuAudio.Flac.Utils.CrcType)">
            <summary>
            Create a CRC computation engine for predefined CRC types.
            </summary>
            <param name="type">The CRC type.</param>
        </member>
        <member name="M:mjuAudio.Flac.Utils.CrcCalc.TableCrc(System.Byte[])">
            <summary>
            Fast lookup table algorithm without augmented zero bytes.
            Only usable with polynom orders of 8, 16, 24 or 32.
            </summary>.
            <param name="p">The Byte array to compute the CRC on.</param>
            <returns>The CRC value.</returns>
        </member>
        <member name="M:mjuAudio.Flac.Utils.CrcCalc.BitByBitCrc(System.Byte[])">
            <summary>
            Fast bit by bit algorithm without augmented zero bytes.
            Does not use a lookup table, suiteable for any polynom order between 1 and 32.
            </summary>
            <param name="p">The Byte array to compute the CRC on.</param>
            <returns>The CRC value.</returns>
        </member>
    </members>
</doc>
